{
"Schema Information": { "quote": "Structural blueprint defining tables, columns, relationships, and constraints. CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE);" },
"Data Dictionary": { "quote": "Centralized repository of data definitions, meanings, and context. Column 'customer_ltv' represents lifetime value in USD, calculated as sum(orders) - sum(returns)." },
"Table Metadata": { "quote": "Information about tables including names, owners, creation dates, and storage. SELECT table_name, table_owner FROM all_tables WHERE tablespace_name = 'USERS';" },
"Column Metadata": { "quote": "Attributes of columns including data types, constraints, and descriptions. SELECT column_name, data_type, character_maximum_length FROM information_schema.columns WHERE table_name = 'customers';" },
"Index Metadata": { "quote": "Information about indexes, their structures, and the columns they cover. CREATE INDEX idx_last_name ON employees(last_name) USING BTREE;" },
"Constraint Metadata": { "quote": "Rules enforcing data integrity through primary keys, foreign keys, and check constraints. ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(id);" },
"Statistics Metadata": { "quote": "Distribution data about column values used by the query optimizer. ANALYZE TABLE transactions COMPUTE STATISTICS FOR COLUMNS amount, transaction_date;" },
"Dependency Metadata": { "quote": "Relationships between database objects such as tables, views, and procedures. SELECT referenced_name FROM all_dependencies WHERE name = 'CUSTOMER_REPORT';" },
"Storage Metadata": { "quote": "Physical storage characteristics including tablespaces, partitions, and file locations. ALTER TABLE sales MOVE PARTITION sales_q1_2023 TABLESPACE archive_ts;" },
"Query Metadata": { "quote": "Information about SQL statements, their execution plans, and performance. EXPLAIN PLAN FOR SELECT * FROM orders WHERE order_date BETWEEN :start_date AND :end_date;" },
"Permissions Metadata": { "quote": "Security information about users, roles, and access privileges. GRANT SELECT, INSERT ON customers TO role_sales_rep;" },
"Temporal Metadata": { "quote": "Time-related information including creation, modification, and access timestamps. SELECT created_date, last_modified_date FROM all_objects WHERE object_type = 'TABLE';" },
"Versioning Metadata": { "quote": "Information tracking changes and versions of database objects. CREATE TABLE employees_v2 AS SELECT * FROM employees_v1 WHERE 1=0;" },
"Procedural Metadata": { "quote": "Information about stored procedures, functions, and triggers. SELECT procedure_name, last_modified_date FROM user_procedures;" },
"View Metadata": { "quote": "Information about views including their definitions and dependencies. CREATE VIEW active_customers AS SELECT * FROM customers WHERE last_order_date > CURRENT_DATE - INTERVAL '6 months';" },
"Partitioning Metadata": { "quote": "Details about how tables are partitioned for performance and management. ALTER TABLE sales PARTITION BY RANGE (order_date) (PARTITION q1_2023 VALUES LESS THAN ('2023-04-01'));" },
"Audit Metadata": { "quote": "Tracking who accessed or modified data, when, and what changes were made. CREATE TRIGGER audit_employees AFTER INSERT OR UPDATE OR DELETE ON employees FOR EACH ROW EXECUTE PROCEDURE log_employee_changes();" },
"Replication Metadata": { "quote": "Information about database replication status, sources, and targets. SELECT master_log_file, master_log_pos FROM slave_status;" },
"Materialized View Metadata": { "quote": "Information about materialized views including refresh schedules and methods. CREATE MATERIALIZED VIEW sales_summary REFRESH COMPLETE ON DEMAND AS SELECT product_id, SUM(amount) FROM sales GROUP BY product_id;" },
"Function Metadata": { "quote": "Details about user-defined functions including parameters and return types. SELECT routine_name, data_type FROM information_schema.routines WHERE routine_type = 'FUNCTION';" },
"Sequence Metadata": { "quote": "Information about sequence generators used for auto-incrementing values. CREATE SEQUENCE order_id_seq START WITH 1000 INCREMENT BY 1 CACHE 20;" },
"Transaction Metadata": { "quote": "Information about active transactions, their states, and durations. SELECT xid, start_time, status FROM v$transaction;" },
"Backup Metadata": { "quote": "Details about database backups including times, sizes, and locations. SELECT backup_id, backup_type, completion_time FROM v$backup_set;" },
"Datatype Metadata": { "quote": "Definitions of system and user-defined data types. CREATE TYPE address_type AS OBJECT (street VARCHAR2(100), city VARCHAR2(50), zipcode VARCHAR2(10));" },
"Performance Metadata": { "quote": "Statistics on query execution, resource usage, and bottlenecks. SELECT sql_id, executions, elapsed_time/executions as avg_time FROM v$sql ORDER BY avg_time DESC;" },
"Connection Metadata": { "quote": "Information about database sessions, connections, and client applications. SELECT sid, username, machine, program FROM v$session WHERE status = 'ACTIVE';" },
"Schema Comparison Metadata": { "quote": "Information highlighting differences between database schemas or versions. SELECT table_name FROM all_tables MINUS SELECT table_name FROM all_tables@dev_db;" },
"ETL Metadata": { "quote": "Information about extraction, transformation, and loading processes. INSERT INTO etl_job_log (job_name, start_time, status) VALUES ('daily_sales_load', CURRENT_TIMESTAMP, 'RUNNING');" },
"Database Link Metadata": { "quote": "Information about connections to other databases. CREATE DATABASE LINK remote_db CONNECT TO remote_user IDENTIFIED BY remote_password USING 'remote_connection_string';" },
"Synonym Metadata": { "quote": "Information about synonyms that provide alternative names for database objects. CREATE PUBLIC SYNONYM customers FOR sales.customers_master;" }
}
