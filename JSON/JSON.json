{
"Names of JSON": { "quote": "JavaScript Object Notation (JSON) - A lightweight data-interchange format. (json.org)" },
"Data Types": { "quote": "JSON supports six data types: strings, numbers, booleans, null, objects, and arrays. (ECMA-404 Standard)" },
"String Format": { "quote": "Strings in JSON must be enclosed in double quotes: \"Hello, World!\". (RFC 8259)" },
"Number Format": { "quote": "Numbers can be integers or floating point: 42, 3.14, -1, 1.0e+10. (RFC 8259)" },
"Boolean Values": { "quote": "JSON has two boolean values: true and false, written in lowercase. (ECMA-404 Standard)" },
"Null Value": { "quote": "null represents a null, empty, or unknown value in JSON. (RFC 8259)" },
"Object Structure": { "quote": "Objects are unordered collections of name/value pairs enclosed in curly braces {}. (json.org)" },
"Array Structure": { "quote": "Arrays are ordered collections of values enclosed in square brackets []. (json.org)" },
"Whitespace Rules": { "quote": "Whitespace can be added around or between name/value pairs without affecting the meaning. (RFC 8259)" },
"File Extension": { "quote": "JSON files typically use the .json extension: example.json. (IANA Media Type)" },
"MIME Type": { "quote": "The official MIME type for JSON is application/json. (IANA Media Type)" },
"Character Encoding": { "quote": "JSON text SHALL be encoded in UTF-8, UTF-16, or UTF-32. (RFC 8259)" },
"Syntax Rules": { "quote": "JSON requires strict syntax: double quotes for strings, no comments, no trailing commas. (ECMA-404 Standard)" },
"Data Exchange": { "quote": "JSON is language-agnostic and can be used with any programming language. (json.org)" },
"Web APIs": { "quote": "JSON is the de facto standard for web API responses and RESTful services. (W3C Web Architecture)" },
"Security Considerations": { "quote": "JSON parsers must protect against infinite recursion and buffer overflows. (RFC 8259)" },
"History": { "quote": "JSON was specified by Douglas Crockford in the early 2000s. (The JSON Saga, Douglas Crockford)" },
"Validation": { "quote": "JSON Schema provides a vocabulary for validating JSON document structure. (json-schema.org)" },
"Serialization": { "quote": "JSON.stringify() converts JavaScript values to JSON strings. (ECMAScript Specification)" },
"Parsing": { "quote": "JSON.parse() parses JSON text to produce JavaScript values. (ECMAScript Specification)" },
"Best Practices": { "quote": "Keep JSON data structures flat when possible to improve readability and performance. (JSON Style Guide)" },
"Limitations": { "quote": "JSON does not support dates, functions, or undefined values natively. (json.org)" },
"Tools": { "quote": "JSON validators and formatters help ensure correct syntax and readability. (json.org)" },
"Alternatives": { "quote": "YAML, XML, and Protocol Buffers are alternative data formats to JSON. (W3C Data Formats)" },
"Documentation": { "quote": "JSON documents should be self-describing and well-structured. (JSON API Specification)" },
"Performance": { "quote": "JSON parsing performance depends on document size and structure complexity. (JSON Performance Best Practices)" },
"Storage": { "quote": "JSON documents can be stored in document databases like MongoDB. (MongoDB Documentation)" },
"Query Language": { "quote": "JSONPath provides XPath-like syntax for querying JSON structures. (JSONPath Specification)" },
"Interoperability": { "quote": "JSON enables seamless data exchange between different systems and platforms. (W3C Web Architecture)" },
"Future Development": { "quote": "JSON continues to evolve with new specifications and tools. (JSON Working Group)" }
}
