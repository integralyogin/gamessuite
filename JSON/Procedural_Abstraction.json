{
"Definition": { "quote": "Procedural abstraction separates what a procedure does from how it does it, allowing users to focus on the purpose rather than implementation details." },
"Black Box Concept": { "quote": "A procedure should be viewed as a black box that transforms inputs to outputs without revealing its internal workings." },
"Information Hiding": { "quote": "Implementation details are intentionally hidden to prevent dependence on specific algorithms or data structures that may change." },
"Specification": { "quote": "A complete procedure specification includes preconditions (what must be true before execution) and postconditions (what will be true after execution)." },
"Interface Contract": { "quote": "The interface forms a contract between the procedure and its users, documenting expected behavior while hiding implementation." },
"Modular Design": { "quote": "Breaking programs into well-defined procedures with clear responsibilities creates maintainable, reusable software components." },
"Procedural Decomposition": { "quote": "Complex problems are broken down into simpler subproblems, each solved by a separate procedure." },
"Functional Cohesion": { "quote": "A procedure should perform exactly one logical task, with all operations contributing to that single purpose." },
"Loose Coupling": { "quote": "Procedures should minimize dependencies on other procedures, communicating primarily through well-defined interfaces." },
"Parameter Passing": { "quote": "Information flows into and out of procedures through carefully designed parameter interfaces that control visibility." },
"Functional Independence": { "quote": "Each procedure should stand alone, neither affecting nor being affected by the internal workings of other procedures." },
"Stepwise Refinement": { "quote": "Start with abstract procedures and progressively refine them into more concrete implementations." },
"Top-Down Design": { "quote": "Begin with a high-level procedure and decompose it into lower-level procedures until reaching primitives." },
"Bottom-Up Implementation": { "quote": "Build and test lower-level procedures first, then combine them into higher-level procedures." },
"Recursive Decomposition": { "quote": "Complex procedures can be defined in terms of simpler versions of themselves, pushing complexity to base cases." },
"Invariants": { "quote": "Conditions that remain true throughout a procedure's execution, helping to verify correctness." },
"Side Effects": { "quote": "Changes to state outside a procedure's scope should be explicitly documented as part of its contract." },
"Reusability": { "quote": "Well-abstracted procedures can be reused in multiple contexts without modification." },
"Maintainability": { "quote": "Changes to a procedure's implementation shouldn't require changes to code that uses the procedure." },
"Abstraction Barriers": { "quote": "Layers of abstraction that protect higher levels from implementation details of lower levels." },
"Procedural Knowledge": { "quote": "Knowledge of how to perform a task is separated from declarative knowledge about the task domain." },
"Implementation Independence": { "quote": "Multiple implementations of the same procedure specification can be interchanged without affecting correctness." },
"Levels of Abstraction": { "quote": "Programs are organized into hierarchical layers, with each layer using abstractions provided by lower layers." },
"Composition": { "quote": "Complex procedures are built by combining simpler procedures in well-defined ways." },
"Testing Isolation": { "quote": "Procedural abstraction allows individual procedures to be tested in isolation from the rest of the program." },
"Documentation": { "quote": "Effective procedure documentation describes what a procedure does, not how it does it." },
"Naming Conventions": { "quote": "Procedure names should clearly communicate purpose and behavior rather than implementation details." },
"Conceptual Integrity": { "quote": "All procedures in a system should follow consistent abstraction principles and conventions." },
"Mental Models": { "quote": "Good abstractions create simple mental models that help programmers understand and predict program behavior." },
"Procedure Libraries": { "quote": "Collections of well-abstracted procedures form reusable libraries that extend the effective vocabulary of a programming language." }
}
