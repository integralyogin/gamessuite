{  
  "Entity-Component-System (ECS)": { "quote": "Decouple data (Components) and logic (Systems): Entities = [Transform, Renderer, Collider]. (Unity DOTS/Unreal)." },  
  "Game Loop": { "quote": "Update cycle: ProcessInput() → Update(deltaTime) → Render(). Frame pacing: target FPS = 1/60 ≈ 16.67ms." },  
  "Memory Management": { "quote": "Pool allocators: Reuse GameObject memory. Stack vs. Heap: Avoid fragmentation (e.g., Unity Burst Compiler)." },  
  "Concurrency Model": { "quote": "Job System: Parallelize tasks (physics, animations) → Thread-safe ECS (e.g., Unity C# Jobs)." },  
  "Scene Graph": { "quote": "Hierarchical transforms: Child.position = Parent.position * localMatrix. Culling: Octree/BVH." },  
  "Resource Pipeline": { "quote": "Asynchronous loading: Texture.LoadAsync() → LOD streaming (e.g., Unreal’s Nanite)." },  
  "Event System": { "quote": "Pub/Sub: OnCollisionEnter() → Dispatch(event). Observer pattern: Achievements.RegisterListener()." },  
  "Serialization": { "quote": "Save/Load: JSON/Binary formats. Versioning: struct SceneV1 { ... } → SceneV2 { ... }." },  
  "Scripting Layer": { "quote": "Lua/Python bindings: Expose C++ API. Hot-reload: Update code without restart (e.g., CryEngine)." },  
  "Low-Level Rendering": { "quote": "Graphics API abstraction: OpenGL/Vulkan/DirectX12. Draw calls → Command buffers." },  
  "Physics Core": { "quote": "Collision detection: GJK/EPA algorithms. Rigidbody integration: v += a * deltaTime; x += v * deltaTime." },  
  "Module Decoupling": { "quote": "Plug-in architecture: Renderer ↔ Audio ↔ Physics as separate DLLs (e.g., Godot modules)." },  
  "Data-Oriented Design": { "quote": "SoA over AoS: Transform[100].x → Cache-friendly iteration (SIMD optimization)." },  
  "Reflection System": { "quote": "Runtime type info: typeof(Component) → Editor property grids (e.g., Unreal UHT)." },  
  "Debug Tools": { "quote": "In-engine console: Execute(‘show_fps 1’). Profiler hooks: Track CPU/GPU/VRAM." },  
  "Platform Abstraction": { "quote": "Cross-platform API: File.Open() → Win32/Posix impl. Conditional compilation: #if UNITY_ANDROID." },  
  "Networking Core": { "quote": "Socket layer: TCP/UDP wrappers. Snapshot interpolation: StateBuffer[t-100ms] → Smooth correction." },  
  "Time Management": { "quote": "deltaTime = currentFrameTime - lastFrameTime. Time scales: Time.timeScale = 0 (pause)." },  
  "Asset Registry": { "quote": "UUID mapping: AssetID → Path (e.g., ‘textures/hero.png’). Dependency tracking: Shader ↔ Material ↔ Mesh." },  
  "Error Handling": { "quote": "Crash dumps: Stack traces + minidumps. Hot-patching: Fix bugs without rebuild (e.g., Live++)." },  
  "Third-Party Integration": { "quote": "PhysX, FMOD, ImGui: Link as static/dynamic libs. Middleware abstraction layer." },  
  "Build System": { "quote": "Incremental compilation: Makefile → Only rebuild modified sources. Shader compilation: HLSL → SPIR-V." },  
  "Memory Safety": { "quote": "RAII: std::unique_ptr → Auto-delete. AddressSanitizer: Catch heap overflows." },  
  "Engine Config": { "quote": "INI/JSON settings: [Graphics] → resolution=1920x1080, vsync=true. Command-line overrides: -fullscreen." },  
  "Future-Proofing": { "quote": "Backward compatibility: Deprecate APIs gracefully. Vulkan → Portable across GPU architectures." }  
}  
