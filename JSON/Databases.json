{
  "Relational Model": { "quote": "Data stored in tables with rows and columns, governed by Codd's 12 rules (1970)." },
  "ACID Properties": { "quote": "Atomicity, Consistency, Isolation, Durability - transaction guarantees (Jim Gray, 1981)." },
  "CAP Theorem": { "quote": "Distributed systems can only guarantee two of three: Consistency, Availability, Partition tolerance (Brewer, 2000)." },
  "Normalization": { "quote": "Eliminate data redundancy through progressive normal forms (1NF to 5NF)." },
  "SQL": { "quote": "Structured Query Language - declarative language for RDBMS manipulation (ANSI SQL-92)." },
  "Indexing": { "quote": "B-trees enable O(log n) search operations in disk-based systems." },
  "OLTP vs OLAP": { "quote": "Transaction processing vs analytical processing - row vs column storage." },
  "NoSQL": { "quote": "Non-relational databases: document, key-value, graph, columnar (Martin Fowler, 2012)." },
  "BASE Model": { "quote": "Basically Available, Soft state, Eventually consistent - alternative to ACID." },
  "Sharding": { "quote": "Horizontal partitioning across multiple database instances." },
  "Replication": { "quote": "Maintain multiple copies through leader-follower architecture." },
  "ACID vs BASE": { "quote": "Consistency vs availability tradeoff in distributed systems." },
  "Database Paradigms": { "quote": "Relational, Document, Key-Value, Graph, Time-Series, Vector." },
  "Joins": { "quote": "Relational algebra operations: inner, left, right, full outer, cross." },
  "Query Optimization": { "quote": "Cost-based optimization using statistics and execution plans." },
  "Locking Mechanisms": { "quote": "Pessimistic vs optimistic concurrency control strategies." },
  "WAL": { "quote": "Write-Ahead Logging ensures durability through sequential writes." },
  "MVCC": { "quote": "Multi-version concurrency control enables non-blocking reads." },
  "Database Index Types": { "quote": "B-tree, Hash, Bitmap, Full-text, Spatial - each with specific use cases." },
  "ORM": { "quote": "Object-Relational Mapping bridges OOP and relational models." },
  "Data Warehousing": { "quote": "Star vs snowflake schemas for analytical workloads." },
  "Columnar Storage": { "quote": "Parquet/ORC formats optimize for analytical query performance." },
  "Graph Databases": { "quote": "Nodes and edges with properties - Neo4j's Cypher query language." },
  "Vector Databases": { "quote": "ANN search for high-dimensional data (FAISS, HNSW algorithms)." },
  "NewSQL": { "quote": "Spanner/CockroachDB combine ACID with horizontal scaling." },
  "Database Security": { "quote": "RBAC, encryption at rest/transit, audit logging essentials." },
  "Database Scaling": { "quote": "Vertical vs horizontal scaling strategies." },
  "Database Transactions": { "quote": "BEGIN, COMMIT, ROLLBACK with isolation levels." },
  "Database Types by Workload": { "quote": "Operational vs analytical vs transactional vs ledgers." },
  "Database Standards": { "quote": "SQL:2016, JDBC/ODBC interfaces, ISO/IEC 9075." }
}

