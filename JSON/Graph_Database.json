{
"Nodes": { "quote": "Entities or objects in a graph, representing discrete data points. In a social network, each person is a node." },
"Edges": { "quote": "Connections between nodes that represent relationships. In a product recommendation system, purchases create edges between customers and products." },
"Properties": { "quote": "Attributes stored on nodes or edges. A user node might have properties like name, age, and location." },
"Labels": { "quote": "Categories or types assigned to nodes. In a movie database, nodes might have labels like 'Movie', 'Actor', or 'Director'." },
"Relationships": { "quote": "Named, directed connections between nodes. In a knowledge graph, 'WORKS_FOR' might connect a Person node to a Company node." },
"Traversal": { "quote": "The process of visiting nodes by following relationships. Finding friends-of-friends involves traversing two relationship hops." },
"Cypher": { "quote": "A declarative query language for graph databases. MATCH (p:Person)-[:FRIENDS_WITH]->(friend) RETURN p, friend" },
"SPARQL": { "quote": "Query language for RDF graph data. SELECT ?person WHERE { ?person a :Person ; :name 'John' }" },
"Gremlin": { "quote": "A graph traversal language for property graphs. g.V().hasLabel('person').out('knows').values('name')" },
"Triple Store": { "quote": "A database optimized for storing RDF triples. Subject-predicate-object statements form the foundation of semantic web data." },
"Property Graph": { "quote": "A graph model where relationships and nodes can have properties. Neo4j and Amazon Neptune implement this model." },
"RDF Graph": { "quote": "Resource Description Framework model based on triples. Used in semantic web applications to represent linked data." },
"Adjacency List": { "quote": "A collection of unordered lists representing connections from each node. Efficient for sparse graphs with many nodes and few edges." },
"Adjacency Matrix": { "quote": "A square matrix representing connections between nodes. Efficient for dense graphs with many connections." },
"Path": { "quote": "A sequence of nodes connected by relationships. Finding shortest paths helps identify degrees of separation between entities." },
"Cycle": { "quote": "A path that starts and ends at the same node. Detecting cycles helps identify circular dependencies or feedback loops." },
"Centrality": { "quote": "Metrics identifying the most important nodes in a graph. Page Rank measures influence based on incoming connections." },
"Community Detection": { "quote": "Algorithms that identify clusters of densely connected nodes. Useful for finding natural groupings in social networks." },
"Graph Algorithms": { "quote": "Specialized procedures for analyzing graph structures. Dijkstra's algorithm finds shortest paths between nodes." },
"Hypergraph": { "quote": "An extension of a graph where edges can connect any number of nodes. Used to model complex many-to-many relationships." },
"Knowledge Graph": { "quote": "A graph representing a network of real-world entities and their interrelations. Google uses knowledge graphs to enhance search results." },
"Graph Partitioning": { "quote": "Dividing a graph into smaller components for distributed processing. Improves performance for very large graphs." },
"Schema": { "quote": "The structural definition of a graph database. Can be strict (enforced) or flexible depending on the database." },
"Index-Free Adjacency": { "quote": "The ability to traverse from a node to its neighbors without using an index lookup. Enables fast traversals in native graph databases." },
"ACID Transactions": { "quote": "Properties ensuring reliable transaction processing in graph databases. Neo4j supports ACID transactions for data integrity." },
"Sharding": { "quote": "Horizontal partitioning of graph data across multiple servers. Enables scaling for massive graphs that don't fit on a single machine." },
"Graph Analytics": { "quote": "Statistical analysis of graph structures. Identifying influencers in social networks through centrality measures." },
"Graph Visualization": { "quote": "Techniques for visually representing graph data. Force-directed layouts arrange nodes based on their relationships." },
"Temporal Graphs": { "quote": "Graphs that incorporate time dimensions in their relationships. Tracking how networks evolve over time." },
"Native Graph Storage": { "quote": "Purpose-built storage designed specifically for graph data structures. Optimizes traversal performance compared to graph layers over relational databases." }
}
