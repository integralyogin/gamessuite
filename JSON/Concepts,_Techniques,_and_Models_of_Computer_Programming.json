{
"Programming Paradigms": { "quote": "A programming paradigm is an approach to programming a computer based on a mathematical theory or a coherent set of principles." },
"Declarative Programming": { "quote": "A program states what needs to be done, not how to do it. This simplifies reasoning about correctness." },
"Functional Programming": { "quote": "A paradigm using functions as first-class values, emphasizing immutability and referential transparency." },
"Imperative Programming": { "quote": "Sequential execution of statements that modify program state, offering direct control over the machine." },
"Object-Oriented Programming": { "quote": "A paradigm organizing code around data structures (objects) with associated behavior (methods)." },
"Concurrent Programming": { "quote": "Managing multiple computations executing simultaneously and potentially communicating with each other." },
"Dataflow Programming": { "quote": "A paradigm where programs are structured as networks of black box processes exchanging data through connections." },
"Constraint Programming": { "quote": "A paradigm where relations between variables are stated as constraints, and the system finds values satisfying them." },
"Logic Programming": { "quote": "Programming based on formal logic where programs are sets of statements expressing facts and rules." },
"Kernel Language": { "quote": "A minimal set of programming concepts that can express all algorithms and data structures in a given paradigm." },
"State": { "quote": "The stored information in a program that can be modified during execution, causing behavior to change over time." },
"Concurrency": { "quote": "The property whereby different computations can execute during overlapping time periods." },
"Determinism": { "quote": "A property of programs where the same input always produces the same output, regardless of execution timing." },
"Nondeterminism": { "quote": "When program behavior may vary between executions with the same input due to timing or external factors." },
"Laziness": { "quote": "Delaying computation until results are needed, potentially avoiding unnecessary work." },
"Eager Evaluation": { "quote": "Computing results immediately when expressions are bound to variables." },
"Single Assignment": { "quote": "Variables that can be assigned only once, simplifying reasoning about program behavior." },
"Multiple Assignment": { "quote": "Variables that can be assigned multiple times, allowing imperative programming techniques." },
"Higher-Order Programming": { "quote": "Using functions that can take other functions as arguments or return them as results." },
"Abstract Data Types": { "quote": "Data types defined by their behavior (operations) rather than their implementation." },
"Lexical Scoping": { "quote": "When variable references are resolved based on their location in the program text." },
"Dynamic Scoping": { "quote": "When variable references are resolved based on the program execution stack." },
"Exception Handling": { "quote": "Mechanisms for managing errors or exceptional situations that disrupt normal program flow." },
"Tail Recursion": { "quote": "Recursive calls that are the last operation in a function, enabling optimizations to avoid stack overflow." },
"Message Passing": { "quote": "A communication mechanism where concurrent entities exchange information through messages." },
"Shared State": { "quote": "When multiple components of a program can access and modify the same data structures." },
"Threads": { "quote": "Sequential execution streams that can run concurrently, typically sharing memory." },
"Actors": { "quote": "Concurrent entities that encapsulate state and communicate only through messages." },
"Software Transactional Memory": { "quote": "A concurrency control mechanism allowing groups of operations to execute atomically." },
"Unification": { "quote": "The process of finding substitutions that make two terms identical, fundamental to logic programming." }
}
