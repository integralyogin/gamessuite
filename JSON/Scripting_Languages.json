{
"Python": { "quote": "High-level, interpreted language: name = 'Python'; print(f'Hello, {name}!')" },
"JavaScript": { "quote": "Web scripting language: const greet = (name) => `Hello, ${name}!`;" },
"Ruby": { "quote": "Object-oriented scripting: def greet(name) puts \"Hello, #{name}!\" end" },
"PHP": { "quote": "Server-side web scripting: <?php echo 'Hello, ' . $name . '!'; ?>" },
"Perl": { "quote": "Text processing language: print \"Hello, $name!\n\";" },
"Shell Script": { "quote": "Command-line scripting: echo \"Hello, $NAME!\"" },
"PowerShell": { "quote": "Windows automation: Write-Host \"Hello, $name!\"" },
"Tcl": { "quote": "Tool Command Language: puts \"Hello, $name!\"" },
"Lua": { "quote": "Embedded scripting language: print('Hello, ' .. name .. '!')" },
"VBScript": { "quote": "Visual Basic Scripting: MsgBox \"Hello, \" & name & \"!\"" },
"AutoHotkey": { "quote": "Windows automation: MsgBox, Hello, %name%!" },
"AppleScript": { "quote": "Mac automation: display dialog \"Hello, \" & name & \"!\"" },
"Google Apps Script": { "quote": "Google services automation: Logger.log('Hello, ' + name + '!');" },
"R": { "quote": "Statistical computing: cat(sprintf('Hello, %s!', name))" },
"MATLAB": { "quote": "Numerical computing: fprintf('Hello, %s!\\n', name)" },
"AWK": { "quote": "Text processing: { print \"Hello,\", $1 \"!\" }" },
"Sed": { "quote": "Stream editor: s/name/replacement/" },
"TypeScript": { "quote": "Typed JavaScript: const greet = (name: string): string => `Hello, ${name}!`;" },
"CoffeeScript": { "quote": "JavaScript alternative: greet = (name) -> \"Hello, #{name}!\"" },
"Groovy": { "quote": "Java-based scripting: println \"Hello, $name!\"" },
"Julia": { "quote": "Scientific computing: println(\"Hello, $name!\")" },
"Scala": { "quote": "JVM scripting: println(s\"Hello, $name!\")" },
"Dart": { "quote": "Web and mobile: print('Hello, $name!');" },
"Swift": { "quote": "Apple development: print(\"Hello, \\(name)!\")" },
"LISP": { "quote": "List processing: (format t \"Hello, ~a!\" name)" },
"Scheme": { "quote": "LISP dialect: (display (string-append \"Hello, \" name \"!\"))" },
"Racket": { "quote": "Educational dialect: (printf \"Hello, ~a!\" name)" },
"Haskell": { "quote": "Functional scripting: putStrLn $ \"Hello, \" ++ name ++ \"!\"" },
"F#": { "quote": "Functional .NET: printfn \"Hello, %s!\" name" }
}
