{
"Document Model": { "quote": "Schema-free data structures that store information in JSON-like documents. Each document can have its own unique structure." },
"Collections": { "quote": "Logical containers for groups of related documents, analogous to tables in relational databases but without enforced schemas." },
"Schema Flexibility": { "quote": "Documents in the same collection can have different fields, allowing for evolving data models without migrations." },
"JSON Format": { "quote": "Most document databases use JSON or BSON (Binary JSON) as their native data format, supporting nested objects and arrays." },
"Document ID": { "quote": "Each document has a unique identifier, often automatically generated, that serves as its primary key." },
"Indexing": { "quote": "Creating indexes on specific fields to optimize query performance, similar to relational databases." },
"Query Languages": { "quote": "Document databases offer specialized query languages or APIs optimized for traversing document structures." },
"Embedded Documents": { "quote": "Nested subdocuments within a parent document, allowing related data to be stored in a single document." },
"Document References": { "quote": "Links between documents that maintain relationships while keeping documents separate, similar to foreign keys." },
"ACID Transactions": { "quote": "Support for atomic operations that ensure data consistency, with varying levels of transaction support across different databases." },
"Distributed Architecture": { "quote": "Many document databases are designed for horizontal scaling across multiple servers or nodes." },
"Sharding": { "quote": "Distributing data across multiple partitions or servers to support larger datasets and higher throughput." },
"Replication": { "quote": "Maintaining copies of data across multiple servers for high availability and fault tolerance." },
"Consistency Models": { "quote": "Different approaches to balancing data consistency, availability, and partition tolerance according to CAP theorem." },
"MapReduce": { "quote": "A programming model for processing large datasets, often used for complex aggregations in document databases." },
"Aggregation Framework": { "quote": "Tools for performing analytics and data transformations on documents within the database." },
"Full-text Search": { "quote": "Capability to search text content within documents, often with features like relevance ranking and fuzzy matching." },
"Geospatial Queries": { "quote": "Support for location-based queries and operations on geographical data stored in documents." },
"Change Streams": { "quote": "Real-time notifications of changes to documents, enabling event-driven architectures." },
"MongoDB": { "quote": "Popular open-source document database known for its flexible schema and comprehensive feature set." },
"CouchDB": { "quote": "Document database with a focus on eventual consistency and bi-directional replication." },
"Firestore": { "quote": "Google's serverless document database designed for mobile and web applications." },
"DocumentDB": { "quote": "Amazon's MongoDB-compatible document database service within AWS." },
"RavenDB": { "quote": "Document database with ACID guarantees and integrated full-text search capabilities." },
"Time-to-Live": { "quote": "Automatic document expiration functionality for managing data lifecycle." },
"Schema Validation": { "quote": "Optional rules that enforce document structure while maintaining flexibility." },
"Atomicity": { "quote": "Guarantees that database operations are performed completely or not at all, even in case of system failure." },
"Eventual Consistency": { "quote": "Data consistency model where all replicas eventually converge to the same state." },
"Polyglot Persistence": { "quote": "Using different database types, including document databases, for different data storage needs within the same application." },
"Document Database vs. RDBMS": { "quote": "Document databases excel with flexible, hierarchical data while relational databases are optimized for complex joins and strict consistency." }
}
