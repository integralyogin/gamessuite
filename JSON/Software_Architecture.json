{
  "Design Principles": { "quote": "SOLID: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion (Uncle Bob)." },
  "Architectural Patterns": { "quote": "Layered Architecture: Presentation → Business → Data (e.g., MVC)." },
  "Monolithic Architecture": { "quote": "Single-tier: Tightly coupled components in one codebase. Trade-off: Simplicity vs. scalability." },
  "Microservices": { "quote": "Bounded Contexts: Decoupled services with REST/gRPC APIs. 'Do one thing well' (Unix philosophy)." },
  "Event-Driven Architecture": { "quote": "Pub/Sub model: Producers → Kafka/RabbitMQ → Consumers (eventual consistency)." },
  "Domain-Driven Design": { "quote": "Ubiquitous Language: Align code with business domains (Eric Evans, DDD)." },
  "Hexagonal Architecture": { "quote": "Ports & Adapters: Isolate core logic from external systems (Alistair Cockburn)." },
  "CAP Theorem": { "quote": "Distributed systems: Consistency, Availability, Partition Tolerance — choose two (Brewer's Theorem)." },
  "Scalability Patterns": { "quote": "Horizontal scaling: Sharding (DB), Load Balancers (Round Robin/Least Connections)." },
  "Fault Tolerance": { "quote": "Circuit Breakers (Hystrix), Retries with exponential backoff (τ = 2ⁿ ms)." },
  "API Design": { "quote": "RESTful principles: Nouns over verbs, HATEOAS, versioning via /v1/ endpoints." },
  "Cloud-Native Design": { "quote": "Twelve-Factor App: Config in env, stateless processes, disposability (Heroku)." },
  "CQRS": { "quote": "Command Query Responsibility Segregation: Separate writes (commands) from reads (queries)." },
  "Event Sourcing": { "quote": "Append-only event log: State = Σ(events). Replay for auditing (Greg Young)." },
  "CI/CD Pipelines": { "quote": "Jenkins/GitHub Actions: Test → Build → Deploy (trunk-based development)." },
  "Security Architecture": { "quote": "Zero Trust: Least privilege, JWT tokens, OAuth2.0 flows (Auth Code/PKCE)." },
  "Performance Optimization": { "quote": "Caching strategies: CDNs, Redis (LRU eviction), memoization (O(1) lookup)." },
  "Legacy System Modernization": { "quote": "Strangler Pattern: Incremental replacement via facade/proxy." },
  "Containerization": { "quote": "Docker: Isolate apps with images. Kubernetes: Pods → Deployments → Services." },
  "Serverless Architecture": { "quote": "AWS Lambda: Stateless functions triggered by events (cost ∝ execution time)." },
  "Data Architecture": { "quote": "OLTP vs. OLAP: ACID (PostgreSQL) vs. denormalized star schemas (Snowflake)." },
  "Observability": { "quote": "Three Pillars: Logs (ELK), Metrics (Prometheus), Traces (OpenTelemetry)." },
  "Code Quality": { "quote": "Static Analysis: SonarQube cyclomatic complexity < 10. DRY vs. pragmatic duplication." },
  "Architectural Decision Records": { "quote": "ADR-001: Context → Decision → Consequences (Michael Nygard)." },
  "Trade-Off Analysis": { "quote": "Iron Triangle: Cost vs. Time vs. Scope. Prioritize via MoSCoW (Must/Should/Could/Won't)." },
  "System Design Interviews": { "quote": "4-step heuristic: Requirements → Estimations → Diagram → Deep Dive (e.g., Design Twitter)." },
  "Ethical Architecture": { "quote": "GDPR compliance: Data minimization, right to erasure (Article 17)." },
  "Quantum-Ready Systems": { "quote": "Post-quantum cryptography: Lattice-based algorithms (NIST 2022)." },
  "Future Trends": { "quote": "AI-Driven Dev: GitHub Copilot → Code generation via GPT-3.5." }
}
