{
"Emergent Gameplay": { "quote": "Complex behavior arising from simple rule interactions. The chemistry system in Breath of the Wild creates unexpected solutions through element combinations." },
"Systems Thinking": { "quote": "Understanding how multiple components influence each other. Civilization's interlocking systems of economy, military, and diplomacy create strategic depth." },
"Feedback Loops": { "quote": "Self-reinforcing or self-balancing system behaviors. In MOBAs, the snowball effect occurs when early advantages lead to greater resource control." },
"State Machines": { "quote": "Systems that transition between defined states based on inputs. Enemy AI in The Last of Us transitions between patrol, investigation, and combat states." },
"Systemic Reaction": { "quote": "How systems respond to player actions or other systems. Far Cry's fire propagation system interacts with wind direction and environment materials." },
"Complex Systems": { "quote": "Networks of many interacting components with non-linear behavior. Rimworld's colonists have needs, traits, and skills that interact to create emergent stories." },
"Procedural Generation": { "quote": "Systems that create content algorithmically. No Man's Sky generates planets, creatures, and ecosystems through interacting procedural systems." },
"Simulation Fidelity": { "quote": "The degree to which systems model real-world behaviors. Microsoft Flight Simulator models complex aerodynamics, weather, and physics systems." },
"System Balance": { "quote": "Maintaining equilibrium between interacting systems. In Path of Exile, the economy, skill tree, and monster difficulty are carefully balanced." },
"Resource Flow": { "quote": "How assets move through interconnected systems. Factorio's production chains transform raw materials through multiple processing stages." },
"Interaction Surface": { "quote": "Where systems connect and influence each other. In Deus Ex, stealth, combat, and hacking systems overlap to create multiple solution paths." },
"Systemic Depth": { "quote": "The complexity and richness of system interactions. Dwarf Fortress's detailed simulation of materials, temperature, and creatures creates unpredictable outcomes." },
"Cascading Effects": { "quote": "How changes in one system propagate through connected systems. In SimCity, increased pollution affects health, property values, and migration patterns." },
"Rules Interaction": { "quote": "How game mechanics combine in unexpected ways. Magic: The Gathering's complex rule interactions create strategic depth through card combinations." },
"System Constraints": { "quote": "Limitations that shape system behaviors. Oxygen Not Included's closed ecosystem requires managing resources, heat, and waste products." },
"Causal Networks": { "quote": "Chains of cause and effect between systems. In Crusader Kings, character relationships affect political alliances, which influence warfare outcomes." },
"Adaptive Systems": { "quote": "Systems that change behavior based on conditions or history. Left 4 Dead's AI Director adjusts enemy spawns based on player performance and pacing." },
"System Autonomy": { "quote": "The degree to which systems operate independently. The ecology in Far Cry operates whether or not the player is present to witness it." },
"Interface Design": { "quote": "How systems present information and accept input. Satisfactory uses visual feedback to show factory efficiency and resource flow." },
"System Transparency": { "quote": "How clearly system behaviors are communicated to users. Into the Breach shows exactly what will happen in the next turn to focus on strategic decisions." },
"Cross-System Impact": { "quote": "How changes in one system affect another. In Stellaris, technological advancement affects diplomatic relations, economic output, and military power." },
"System Abstraction": { "quote": "Representing complex real-world systems in simplified forms. Crusader Kings abstracts medieval warfare into numbers and probabilities." },
"Emergence Boundary": { "quote": "The threshold where system interactions become unpredictable. The Sims' personality traits combine to create behaviors not explicitly programmed." },
"Interaction Cost": { "quote": "The resources or effort required for systems to interact. Command & Conquer's tech tree represents research and development costs." },
"System Stability": { "quote": "How resilient systems are to disruption. Eve Online's economy adapts to player behavior while maintaining overall stability." },
"Predictive Modeling": { "quote": "Forecasting future system states based on current conditions. Weather systems in simulation games predict conditions based on atmospheric models." },
"System Coupling": { "quote": "The degree of interdependence between systems. In Factorio, electricity production is tightly coupled to mining and manufacturing." },
"Recursive Systems": { "quote": "Systems that feed back into themselves. In Cities: Skylines, traffic patterns affect land value, which affects zoning demand, which affects traffic." },
"System Extensibility": { "quote": "How easily systems can be expanded or modified. Minecraft's modding ecosystem allows for extending the game's core systems." },
"Interaction Vectors": { "quote": "The pathways through which systems influence each other. In Kerbal Space Program, thrust, aerodynamics, and gravity interact through physics calculations." }
}
