{
  "Abstraction": { "quote": "The essence of abstraction is to preserve information that is relevant in a given context, and forget information that is irrelevant in that context." },
  "Encapsulation": { "quote": "Encapsulation is not information hiding. Encapsulation is the bundling of data with the methods that operate on that data." },
  "Modularity": { "quote": "The secret of building large apps is never build large apps. Break your applications into small modules." },
  "Separation of Concerns": { "quote": "Divide each difficulty into as many parts as is feasible and necessary to resolve it." },
  "DRY Principle": { "quote": "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system." },
  "KISS Principle": { "quote": "Simplicity is prerequisite for reliability." },
  "SOLID Principles": { "quote": "A class should have only one reason to change." },
  "Design Patterns": { "quote": "Patterns are literary formats for capturing the wisdom and experience of expert designers." },
  "Coupling & Cohesion": { "quote": "The goal is to minimize coupling and maximize cohesion." },
  "Law of Demeter": { "quote": "Only talk to your immediate friends." },
  "YAGNI": { "quote": "Always implement things when you actually need them, never when you just foresee that you need them." },
  "TDD": { "quote": "Test-driven development is a way of managing fear during programming." },
  "API Design": { "quote": "A good API is not just easy to use but hard to misuse." },
  "Domain-Driven Design": { "quote": "The heart of software is its ability to solve domain-related problems for its user." },
  "Architectural Patterns": { "quote": "All architecture is design but not all design is architecture." },
  "Refactoring": { "quote": "Refactoring is a disciplined technique for restructuring an existing body of code." },
  "Code Smells": { "quote": "A code smell is a surface indication that usually corresponds to a deeper problem in the system." },
  "Dependency Injection": { "quote": "Dependency injection separates the creation of a client's dependencies from its own behavior." },
  "Concurrency Patterns": { "quote": "Shared mutable state is the root of all evil in concurrent systems." },
  "Error Handling": { "quote": "Error handling is important, but if it obscures logic, it's wrong." },
  "CQRS": { "quote": "Separate the data model for reading from the model for writing." },
  "Event Sourcing": { "quote": "Capture all changes to application state as a sequence of events." },
  "Hexagonal Architecture": { "quote": "Allow an application to equally be driven by users, programs, or automated tests." },
  "Microservices": { "quote": "Do one thing well - the Unix philosophy applied to services." },
  "CAP Theorem": { "quote": "You can only have two out of three: Consistency, Availability, Partition tolerance." },
  "ACID Properties": { "quote": "Atomicity, Consistency, Isolation, Durability - the four key transaction guarantees." },
  "REST Principles": { "quote": "Hypermedia as the engine of application state." },
  "C4 Model": { "quote": "Context, Containers, Components, and Code - different levels of abstraction for software architecture." },
  "CI/CD": { "quote": "Continuous integration is a software development practice where members integrate their work frequently." },
  "Design by Contract": { "quote": "Specify precise interface specifications using preconditions, postconditions, and invariants." }
}

