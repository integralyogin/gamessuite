{
  "Speech Recognition": { "quote": "Hidden Markov Models (HMMs) → RNNs/Transformers: P(w | x) = argmax(ASR(x)) (e.g., Whisper, Siri)." },
  "Recommendation Systems": { "quote": "Collaborative filtering: ŷ = UᵗV (user-item matrix factorization). Netflix Prize (RMSE < 0.8572)." },
  "Computer Vision": { "quote": "YOLOv8: Bounding box regression loss = CIOU + class probability. COCO mAP@0.5: 53.9%." },
  "Fraud Detection": { "quote": "Anomaly detection: Isolation Forest → if (transaction.score > θ) → flag." },
  "Autonomous Vehicles": { "quote": "Sensor fusion: LiDAR + CNN → BEV (Bird's Eye View) mapping. Tesla Autopilot Waypoints." },
  "Machine Translation": { "quote": "Seq2Seq + Attention: BLEU score ↑ with Transformer (e.g., Google Translate)." },
  "Medical Diagnostics": { "quote": "ResNet-50 on X-rays: AUC-ROC = 0.98 for pneumonia detection (CheXpert dataset)." },
  "Supply Chain Optimization": { "quote": "Linear programming: min(cᵗx) s.t. Ax ≤ b → Solve with Simplex/CPLEX." },
  "Chatbots": { "quote": "Intent recognition: BERT embeddings → Cosine similarity ≥ 0.7 → DialogFlow response." },
  "Facial Recognition": { "quote": "Eigenfaces → ArcFace loss: L = -log(e^(cos(θ + m)) / Σ e^(cos(θ)))." },
  "Predictive Maintenance": { "quote": "LSTM on sensor data: RUL (Remaining Useful Life) = f(vibration, temp)." },
  "Sentiment Analysis": { "quote": "Fine-tuned BERT: F1-score on IMDb reviews = 92.5% (positive/negative)." },
  "Game AI": { "quote": "AlphaGo: Policy-Value Networks + MCTS (Monte Carlo Tree Search). Elo rating > 5000." },
  "Robotics Control": { "quote": "PID Controllers: u(t) = Kₚe(t) + Kᵢ∫e(τ)dτ + Kₚ(de/dt). Baxter robot arm IK." },
  "Spam Filtering": { "quote": "Naive Bayes: P(spam | words) ∝ P(words | spam)P(spam) → Threshold = 0.9." },
  "Style Transfer": { "quote": "GANs: L = λ_content‖Cₜ - Cₛ‖ + λ_style‖Gₜ - Gₛ‖ (e.g., Prisma app)." },
  "Time Series Forecasting": { "quote": "ARIMA(p,d,q): Δᵈyₜ = c + ΣφΔᵈyₜ₋₁ + Σθϵₜ₋₁ → Predict stock prices." },
  "Object Tracking": { "quote": "Kalman Filter: xₖ = Axₖ₋₁ + Buₖ + wₖ → Update with SORT algorithm." },
  "Search Engines": { "quote": "PageRank: PR(A) = (1 - d) + d Σ PR(Tᵢ)/C(Tᵢ). BM25 relevance scoring." },
  "Voice Cloning": { "quote": "Tacotron 2: Mel-spectrograms → WaveGlow vocoder → Clone speech (VCTK dataset)." },
  "Agricultural AI": { "quote": "Satellite imagery → U-Net segmentation: Crop health = NDVI > 0.4." },
  "Industrial Automation": { "quote": "Q-Learning: Q(s,a) ← Q(s,a) + α[r + γmaxQ(s',a') - Q(s,a)] → Optimize assembly lines." },
  "Bias Mitigation": { "quote": "Fairness: Adversarial debiasing → min(L_task) - λL_fair (e.g., AIF360)." },
  "Energy Optimization": { "quote": "Reinforcement Learning: Reward = -(energy_cost) → HVAC control (Google DeepMind)." },
  "Edge AI": { "quote": "TinyML: Quantize ResNet-18 → 8-bit INT → Deploy on Raspberry Pi." },
  "Document Processing": { "quote": "OCR: Tesseract + LayoutLM → Extract text/invoices (F1 = 89% on ICDAR)." },
  "Customer Segmentation": { "quote": "K-Means: argmin Σ‖xᵢ - μⱼ‖² → Cluster users (RFM analysis)." },
  "AI in Retail": { "quote": "Demand forecasting: XGBoost MAE = 12.3 units → Optimize inventory (Walmart)." },
  "Limitations": { "quote": "No transfer learning: Chess AI ≠ Go AI. Catastrophic forgetting (e.g., MNIST → SVHN)." }
}
