{
"Relational Databases": { "quote": "Structured data organized in tables with rows and columns, where relationships between data entities are defined. (MySQL, PostgreSQL, Oracle, SQL Server)" },
"NoSQL Databases": { "quote": "Non-tabular databases that store data differently than relational tables. (MongoDB, Cassandra, Redis, CouchDB)" },
"SQL": { "quote": "Structured Query Language for managing and manipulating relational databases. SELECT * FROM users WHERE status = 'active';" },
"Normalization": { "quote": "Process of organizing database structure to reduce redundancy and improve data integrity through normal forms. (1NF, 2NF, 3NF, BCNF)" },
"Indexes": { "quote": "Data structures that improve the speed of data retrieval operations by creating efficient lookup paths. CREATE INDEX idx_lastname ON employees(last_name);" },
"Transactions": { "quote": "Logical units of work that must be completed entirely or not at all, following ACID properties. BEGIN; UPDATE accounts SET balance = balance - 100 WHERE id = 1; UPDATE accounts SET balance = balance + 100 WHERE id = 2; COMMIT;" },
"ACID Properties": { "quote": "Atomicity, Consistency, Isolation, Durability - principles ensuring reliable database transactions." },
"BASE Properties": { "quote": "Basically Available, Soft state, Eventually consistent - alternative to ACID used in many NoSQL systems prioritizing availability over consistency." },
"Sharding": { "quote": "Horizontal partition of data across multiple databases to distribute load and improve performance. Each shard contains a subset of the total data." },
"Replication": { "quote": "Creating and maintaining duplicate copies of a database to improve availability, reliability, and performance. (Master-Slave, Master-Master)" },
"Query Optimization": { "quote": "Improving query performance through execution plan analysis, indexing strategies, and SQL rewrites. EXPLAIN SELECT * FROM orders WHERE customer_id = 1045;" },
"Database Schema": { "quote": "Formal definition of the database structure including tables, relationships, constraints, and views. CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50));" },
"Data Modeling": { "quote": "Process of creating a conceptual representation of data objects and their relationships. (Entity-Relationship diagrams, UML)" },
"Primary Key": { "quote": "Unique identifier for each record in a table. CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100));" },
"Foreign Key": { "quote": "Field in one table that uniquely identifies a row of another table, establishing a relationship between tables. FOREIGN KEY (customer_id) REFERENCES customers(id);" },
"Stored Procedures": { "quote": "Prepared SQL code that can be saved and reused. CREATE PROCEDURE GetEmployeesByDepartment(@DeptID INT) AS SELECT * FROM employees WHERE department_id = @DeptID;" },
"Triggers": { "quote": "SQL code that automatically executes in response to certain events on a particular table. CREATE TRIGGER after_insert AFTER INSERT ON orders FOR EACH ROW BEGIN INSERT INTO audit_log VALUES(NEW.id, 'insert', NOW()); END;" },
"Views": { "quote": "Virtual tables based on the result-set of an SQL statement. CREATE VIEW active_customers AS SELECT * FROM customers WHERE status = 'active';" },
"Data Integrity": { "quote": "Accuracy, consistency, and reliability of data throughout its lifecycle. (Entity integrity, referential integrity, domain integrity)" },
"Database Security": { "quote": "Protection of database from unauthorized access, corruption, or theft. GRANT SELECT, INSERT ON customers TO 'app_user'@'localhost';" },
"Backup & Recovery": { "quote": "Strategies for creating database copies and restoring data in case of failure. BACKUP DATABASE customerDB TO DISK = 'D:\\backups\\customerDB.bak';" },
"Data Warehousing": { "quote": "Systems designed for query and analysis rather than transaction processing, often integrating data from multiple sources. (Star schema, snowflake schema)" },
"ETL Processes": { "quote": "Extract, Transform, Load - methods for collecting data from various sources, converting it to a consistent format, and loading into a target database." },
"Database Partitioning": { "quote": "Division of large tables into smaller, more manageable pieces while maintaining logical view as a single table. PARTITION TABLE sales BY RANGE (date_column);" },
"Connection Pooling": { "quote": "Technique of creating and managing a pool of connections for database sessions to minimize the cost of establishing connections." },
"ORM": { "quote": "Object-Relational Mapping - technique that converts data between incompatible systems in object-oriented programming languages. (Hibernate, Entity Framework, SQLAlchemy)" },
"Database Administration": { "quote": "Practices and procedures for managing, monitoring, and maintaining database systems. SHOW STATUS; ANALYZE TABLE orders; OPTIMIZE TABLE customers;" },
"Database Isolation Levels": { "quote": "Different degrees of isolation between transactions. (Read Uncommitted, Read Committed, Repeatable Read, Serializable)" },
"Database Migration": { "quote": "Process of transferring data between different storage types, formats, or systems, often with schema changes. ALTER TABLE users ADD COLUMN email VARCHAR(100);" },
"Query Caching": { "quote": "Storing results of database queries to improve performance for repeated queries. SET query_cache_type = 1; SET query_cache_size = 67108864;" }
}
