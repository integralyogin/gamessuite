{
"Primitive Types": { "quote": "Basic building blocks that represent simple values. Examples: int, float, char, bool." },
"Integer": { "quote": "Whole numbers without fractional parts. In most languages: byte (8-bit), short (16-bit), int (32-bit), long (64-bit)." },
"Floating Point": { "quote": "Numbers with fractional parts. float (32-bit) provides 6-7 decimal digits precision; double (64-bit) provides 15-16 digits." },
"Boolean": { "quote": "Represents logical values: true or false. Used for conditional operations and control flow." },
"Character": { "quote": "Single textual unit. May be ASCII (1 byte), UTF-8 (variable), or UTF-16 (2+ bytes) depending on encoding." },
"String": { "quote": "Sequence of characters. 'Hello, world!' is a string literal in most programming languages." },
"Array": { "quote": "Ordered collection of same-type elements accessed by index. int[] numbers = {1, 2, 3, 4, 5}; creates an array of integers." },
"List": { "quote": "Dynamic array that can grow or shrink. ArrayList<String> in Java, list in Python, List<T> in C#." },
"Tuple": { "quote": "Immutable ordered collection of potentially different types. (string, int, bool) in C#, tuple in Python." },
"Dictionary": { "quote": "Collection of key-value pairs. Map in Java, dict in Python, Dictionary<TKey,TValue> in C#, Object in JavaScript." },
"Set": { "quote": "Unordered collection of unique elements. HashSet in Java, set in Python, Set<T> in C#." },
"Stack": { "quote": "LIFO (Last In, First Out) data structure. push() adds to top, pop() removes from top." },
"Queue": { "quote": "FIFO (First In, First Out) data structure. enqueue() adds to end, dequeue() removes from front." },
"Linked List": { "quote": "Sequence of nodes where each node points to the next node. Efficient for insertions and deletions." },
"Tree": { "quote": "Hierarchical structure with a root node and child nodes. Binary trees, B-trees, and tries are specialized variants." },
"Graph": { "quote": "Collection of nodes connected by edges. Used to represent networks, relationships, and complex systems." },
"Enum": { "quote": "Named constant values. enum Color {RED, GREEN, BLUE} defines a type with three possible values." },
"Struct": { "quote": "Value type that groups related data. struct Point {int x; int y;} in C/C++ defines a 2D point." },
"Class": { "quote": "Reference type that encapsulates data and behavior. The foundation of object-oriented programming." },
"Interface": { "quote": "Contract specifying methods a class must implement. Enables polymorphism and abstraction." },
"Null/None/nil": { "quote": "Represents absence of value. null in Java/C#, None in Python, nil in Ruby, null in JavaScript." },
"Date/Time": { "quote": "Represents temporal values. DateTime in C#, Date in Java, datetime in Python, all with varying precision." },
"Binary Data": { "quote": "Raw sequence of bytes. byte[] in Java/C#, bytes in Python, Buffer in Node.js." },
"JSON": { "quote": "Structured data format using key-value pairs and arrays. Ideal for data interchange between systems." },
"XML": { "quote": "Hierarchical data format using tags and attributes. Often used for configuration and document markup." },
"BLOB": { "quote": "Binary Large Object for storing binary data in databases. Images, audio files, and documents are common BLOBs." },
"UUID/GUID": { "quote": "Universally/Globally Unique Identifier. 128-bit value like 550e8400-e29b-41d4-a716-446655440000." },
"Regular Expression": { "quote": "Pattern describing text format. ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$ matches email addresses." },
"Pointer": { "quote": "Variable that stores memory address of another variable. int* ptr = &var; in C/C++." },
"Optional/Maybe": { "quote": "Type that explicitly handles potentially missing values. Optional<String> in Java, Option in Rust, Maybe in Haskell." }
}
