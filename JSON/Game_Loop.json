{  
  "Timing & Scheduling": { "quote": "Frame pacing: target FPS = 1/60 ≈ 16.67ms. Use high-resolution clocks (QueryPerformanceCounter on Windows)." },  
  "Input Polling": { "quote": "Process keyboard, mouse, gamepad: Unity’s Input.GetAxis(\"Horizontal\") → normalized [-1, 1]." },  
  "Update Methods": { "quote": "Entity updates: foreach (entity in scene) → entity.Update(deltaTime)." },  
  "Render Submission": { "quote": "Draw calls → GPU command buffers (Vulkan vkCmdDrawIndexed). Triple buffering for vsync." },  
  "DeltaTime Management": { "quote": "Compute Δt: deltaTime = currentFrameTime - lastFrameTime. Clamp to 0.1s to prevent spiral of death." },  
  "Fixed Timestep": { "quote": "Physics stability: while (accumulator >= 0.016667s) → Physics.Simulate(1/60). (Gaffer on Games’ approach)." },  
  "Variable Timestep": { "quote": "Smooth rendering: deltaTime varies → movement *= deltaTime (e.g., Unity’s Time.deltaTime)." },  
  "Concurrency": { "quote": "Split tasks: RenderThread (GPU) ←→ LogicThread (CPU). Sync via fences (e.g., Vulkan semaphores)." },  
  "Interpolation": { "quote": "Smooth jitter: renderPosition = prevPos + (currentPos - prevPos) * (α / fixedDeltaTime)." },  
  "Pause/Resume": { "quote": "Time.timeScale = 0 → Halt updates. Keep rendering (e.g., pause menus in *The Witcher 3*)." },  
  "Debug Overheads": { "quote": "Profile loop phases: Input (2ms) → Update (8ms) → Render (6ms) → Idle (0.67ms)." },  
  "Platform Sync": { "quote": "VSync: Wait for vertical blank (glfwSwapInterval(1)). Tearing trade-offs (glfwSwapInterval(0))." },  
  "Physics Integration": { "quote": "Integrate forces: position += velocity * Δt; velocity += (force / mass) * Δt. (Verlet or RK4)." },  
  "Frame Rate Control": { "quote": "Uncapped FPS: while (PeekMessage()) { ... } else { SpinWait(); } (avoid GPU driver timeouts)." },  
  "Loop Architectures": { "quote": "Classic: while (running) { ProcessInput(); Update(); Render(); } vs. Event-driven (e.g., browser games)." },  
  "Prediction & Rollback": { "quote": "Netcode: Client predicts → Server reconciles. *GGPO*’s frame delay/rollback for fighting games." },  
  "Temporal Effects": { "quote": "Motion blur: Velocity buffer → Shader samples prevFrame. Requires tracking past transforms." },  
  "Headless Mode": { "quote": "Server simulation: Run Update() without Render() → Dedicated game servers (e.g., *Minecraft*)." },  
  "Frame Stepping": { "quote": "Debugging: Pause → Advance one frame (Unreal’s ‘EnableDebugCamera’)." },  
  "Energy Efficiency": { "quote": "Mobile: Throttle FPS in background (requestIdleCallback → 30 FPS)." },  
  "Frame Drops": { "quote": "Mitigation: Skip render → Extrapolate (e.g., *Rocket League*’s predictive ball physics)." },  
  "Determinism": { "quote": "Lockstep sync: Fixed-point math, same Δt → Replay races in *Mario Kart*." },  
  "Time Scaling": { "quote": "Slow-mo: Time.timeScale = 0.5 → *Superhot*’s \"time moves when you move\"." },  
  "Future Trends": { "quote": "AI-driven loops: DLSS 3 Frame Generation → Render at 30 FPS, interpolate to 60." }  
}  
