{
"Basic Syntax": { "quote": "Python uses indentation for code blocks, making code structure visually clear and enforcing clean formatting." },
"Variables": { "quote": "x = 5 # Dynamic typing allows variables to hold different types, no declaration needed." },
"Data Types": { "quote": "int, float, str, bool, list, tuple, dict, set - Python's fundamental data types." },
"Lists": { "quote": "my_list = [1, 2, 3] # Ordered, mutable sequences that can hold mixed types." },
"Tuples": { "quote": "my_tuple = (1, 2, 3) # Ordered, immutable sequences for data that shouldn't change." },
"Dictionaries": { "quote": "my_dict = {'key': 'value'} # Key-value pairs for mapping relationships." },
"Sets": { "quote": "my_set = {1, 2, 3} # Unordered collections of unique elements." },
"String Operations": { "quote": "'Hello ' + 'World' # Strings are immutable sequences of characters with rich methods." },
"Control Flow": { "quote": "if condition: # elif and else provide decision making capabilities." },
"Loops": { "quote": "for item in iterable: # while loops and comprehensions provide iteration options." },
"Functions": { "quote": "def function_name(parameters): # Reusable code blocks with optional arguments." },
"Lambda Functions": { "quote": "lambda x: x*2 # Anonymous functions for simple operations." },
"Classes": { "quote": "class ClassName: # Blueprint for creating objects with attributes and methods." },
"Inheritance": { "quote": "class Child(Parent): # Supports single and multiple inheritance." },
"Exception Handling": { "quote": "try: # except: # finally: # Gracefully handle errors and exceptions." },
"Modules": { "quote": "import module_name # Code organization and reuse through modules." },
"File Operations": { "quote": "with open('file.txt', 'r') as f: # File handling with context managers." },
"List Comprehensions": { "quote": "[x for x in range(10)] # Concise way to create lists based on existing sequences." },
"Generators": { "quote": "yield value # Memory-efficient iteration through yield statements." },
"Decorators": { "quote": "@decorator # Modify or enhance functions or classes without directly changing their source code." },
"Magic Methods": { "quote": "__init__, __str__, __len__ # Special methods for customizing object behavior." },
"Package Management": { "quote": "pip install package_name # Managing external libraries and dependencies." },
"Virtual Environments": { "quote": "venv creates isolated Python environments for project dependencies." },
"Threading": { "quote": "import threading # Concurrent execution of code through threads." },
"Multiprocessing": { "quote": "import multiprocessing # Parallel execution using multiple processors." },
"Regular Expressions": { "quote": "import re # Pattern matching and text manipulation." },
"Unit Testing": { "quote": "import unittest # Framework for automated testing." },
"Type Hints": { "quote": "def function(x: int) -> str: # Optional static type declarations." },
"Context Managers": { "quote": "with statement handles setup and cleanup of resources." },
"Iterators": { "quote": "__iter__ and __next__ methods define custom iteration behavior." }
}
