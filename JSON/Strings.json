{
"String Definition": { "quote": "A sequence of characters, typically stored as an array of bytes with encoding rules. In C, strings are null-terminated char arrays." },
"String Representation": { "quote": "Various encoding schemes map characters to binary: ASCII (7-bit), Extended ASCII (8-bit), Unicode with UTF-8, UTF-16, UTF-32." },
"String Operations": { "quote": "Common operations include concatenation, substring extraction, comparison, searching, and replacement." },
"String Concatenation": { "quote": "Joining two strings: In Python, result = str1 + str2; in Java, result = str1.concat(str2)." },
"String Length": { "quote": "The number of characters or bytes: In C, strlen(str); in JavaScript, str.length; in Python, len(str)." },
"String Comparison": { "quote": "Comparing character by character, often with lexicographic ordering: strcmp(str1, str2) in C; str1.compareTo(str2) in Java." },
"String Searching": { "quote": "Finding substrings: indexOf() in Java and JavaScript; find() in Python; strstr() in C." },
"String Replacement": { "quote": "Substituting parts of strings: replace() in most languages; regex-based replacements with replaceAll() or re.sub()." },
"String Splitting": { "quote": "Dividing a string by delimiter: split() in most languages; strtok() in C; String.split() in Java." },
"String Joining": { "quote": "Combining array elements: join() in JavaScript and Python; String.join() in Java; implode() in PHP." },
"String Trimming": { "quote": "Removing whitespace: trim() removes from both ends; trimStart()/trimEnd() for specific ends." },
"String Case Conversion": { "quote": "Changing character case: toUpperCase()/toLowerCase() in JavaScript; upper()/lower() in Python." },
"String Immutability": { "quote": "In Java, JavaScript, and Python, strings are immutable â€“ operations create new string instances rather than modifying existing ones." },
"String Builders": { "quote": "Mutable string classes for efficient concatenation: StringBuilder in Java, StringBuffer, std::stringstream in C++." },
"String Interpolation": { "quote": "Embedding expressions in string literals: f-strings in Python, template literals in JavaScript, string.Format() in C#." },
"Regular Expressions": { "quote": "Pattern matching for strings: regex libraries provide search, match, replace, and validation capabilities." },
"String Algorithms": { "quote": "Specialized algorithms for string processing: Knuth-Morris-Pratt, Boyer-Moore, Rabin-Karp for efficient substring searches." },
"String Matching": { "quote": "Finding exact or approximate matches: edit distance, Levenshtein distance, fuzzy matching algorithms." },
"String Sorting": { "quote": "Ordering strings: lexicographical comparison, specialized algorithms like suffix arrays." },
"String Compression": { "quote": "Reducing string size: run-length encoding, Huffman coding, Lempel-Ziv algorithms." },
"String Memory Management": { "quote": "Strings require allocation, deallocation, and often copying; string interning optimizes memory for repeated strings." },
"String Tokenization": { "quote": "Breaking strings into meaningful tokens: lexers/scanners, strtok() in C, StringTokenizer in Java." },
"String Buffer Overflow": { "quote": "Security vulnerability when input exceeds allocated buffer: prevented with bounds checking and safe functions like strncpy()." },
"String Formatting": { "quote": "Creating structured output: printf() in C, format() in Python, String.format() in Java." },
"String Parsing": { "quote": "Extracting structured data from strings: parsing numbers, dates, or domain-specific formats." },
"String Normalization": { "quote": "Standardizing representations: Unicode normalization forms (NFC, NFD, NFKC, NFKD) handle equivalent character sequences." },
"String Localization": { "quote": "Adapting strings for different languages and regions: i18n libraries handle translation and locale-specific formatting." },
"String Validation": { "quote": "Verifying string format: regex patterns for email, URLs, phone numbers; input validation to prevent injection attacks." },
"String Hashing": { "quote": "Creating numeric representations: hash functions enable fast dictionary lookups and string fingerprinting." },
"Suffix Trees & Arrays": { "quote": "Data structures for advanced string operations: efficient for substring searches, longest common substring, and text indexing." }
}
