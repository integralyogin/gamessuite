{
  "Game Design Core": { "quote": "Rules define play: Mechanics, Dynamics, Aesthetics (MDA Framework)." },
  "2D Game Basics": { "quote": "Sprites, tilesets, and collision: Platformer movement with velocity (dx, dy)." },
  "3D Game Basics": { "quote": "Meshes, transforms, and cameras: GameObject.position = (x, y, z)." },
  "Game Physics": { "quote": "Rigidbody.AddForce() → Collision detection via Box2D/Havok." },
  "Game AI Fundamentals": { "quote": "Finite State Machines: if (playerInSight) → Chase(); else → Patrol();" },
  "Level Design Principles": { "quote": "Guiding players with light, choke points, and landmarks (e.g., Dark Souls' interconnected worlds)." },
  "UI/UX for Games": { "quote": "HUDs and menus: Canvas.Button.onClick → LoadScene('Level1')." },
  "Sound & Music": { "quote": "FMOD/Wwise integration: Adaptive layers for tension (e.g., dynamic battle music)." },
  "Scripting & Events": { "quote": "Unity: OnTriggerEnter(Collider) → Unreal: Blueprint Event Dispatchers." },
  "Multiplayer Basics": { "quote": "Client-server architecture: Netcode for GameObject synchronization." },
  "Shader Fundamentals": { "quote": "HLSL/GLSL: Vertex → Fragment pipeline for cel shading or water effects." },
  "Procedural Content": { "quote": "Perlin noise terrain: dungeon.Generate(seed) → Rogue-like randomness." },
  "Optimization Techniques": { "quote": "Batch rendering, LODs, and occlusion culling → FPS ↑." },
  "Particle Systems": { "quote": "Unity VFX Graph: Emit(rate, velocity) → Fire, explosions, or magic." },
  "Narrative Design": { "quote": "Branching dialogues: Ink/Yarn Spinner → PlayerChoice.Save(key)." },
  "Advanced AI": { "quote": "Utility AI: ActionScore = Σ(weight * factor) → Choose highest." },
  "VR/AR Development": { "quote": "Unity XR: Headset tracking → Hand interactions via Oculus SDK." },
  "Game Testing & QA": { "quote": "Automated tests: Assert.AreEqual(expected, actual) in playmode." },
  "Monetization & LiveOps": { "quote": "F2P economies: Daily rewards, gacha rates (pity timer ε = 0.1%)." },
  "Post-Processing": { "quote": "Bloom, chromatic aberration → Unity URP Post-Processing Stack." },
  "Localization": { "quote": "StringTable.Get(\"en\") → LoadJSON(language_file)." },
  "Ethical Design": { "quote": "Avoid lootbox exploitation: PEGI/ESRB compliance and player transparency." },
  "Indie Dev Strategies": { "quote": "Steam wishlist funnel: Trailer → Demo → Launch discounts." },
  "Game Engine Architecture": { "quote": "ECS pattern: Entities (data), Components (properties), Systems (logic)." },
  "Modding Support": { "quote": "Expose Lua APIs: Workshop.Upload(mod) → Community-driven content." },
  "Retro Game Techniques": { "quote": "NES-style constraints: 4-color palettes, 8x8 tilemaps (PICO-8)." },
  "Emergent Gameplay": { "quote": "Systems-driven design: Breath of the Wild’s fire + wind = spread." },
  "Game Publishing": { "quote": "Pitch decks: Highlight USP (e.g., 'Procedural storytelling meets survival')." },
  "Future of Games": { "quote": "AI-generated content: GPT-3 for dynamic NPC dialogues or quests." }
}
