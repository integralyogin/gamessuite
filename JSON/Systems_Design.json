{
"Emergent Gameplay": { "quote": "Complex player experiences arising from simple rule interactions. The chemistry system in Breath of the Wild creates unexpected solutions through element combinations." },
"Core Loops": { "quote": "The fundamental repeating activity cycle that drives gameplay. In Monster Hunter: hunt monster, craft gear from monster parts, hunt stronger monsters." },
"Resource Systems": { "quote": "The creation, consumption, and management of in-game currencies and materials. Factorio's production chains transform raw materials through multiple processing stages." },
"Progression Systems": { "quote": "How players advance and gain power over time. Path of Exile's passive skill tree offers extensive character customization through incremental improvements." },
"Economy Balancing": { "quote": "Managing the flow and value of resources throughout the game. EVE Online employs an economist to monitor its player-driven market economy." },
"Feedback Loops": { "quote": "Systems where outputs affect future inputs. The rubber-banding in Mario Kart gives trailing players better items to create closer races." },
"Positive Feedback": { "quote": "Systems that amplify advantages over time. In Civilization, early territorial gains lead to more resources, allowing faster expansion." },
"Negative Feedback": { "quote": "Systems that counteract advantages to maintain balance. Battle royale games like Fortnite use shrinking play areas to force confrontation between survivors." },
"System Interplay": { "quote": "How different game systems interact with each other. Rimworld combines colonist needs, environmental threats, and resource management to create dynamic storytelling." },
"Risk/Reward Mechanics": { "quote": "Balancing potential gains against potential losses. Dead Cells offers optional challenge rooms with valuable rewards but significant dangers." },
"Probability Systems": { "quote": "Using randomness to create variety and unpredictability. XCOM uses visible percentage chances for actions, creating tension and forcing contingency planning." },
"Decision Trees": { "quote": "Branching choices with different outcomes. In Fallout: New Vegas, faction allegiances close off certain quest lines while opening others." },
"State Machines": { "quote": "Systems that transition between different modes based on conditions. Enemy AI in The Last of Us shifts between searching, investigating, and combat states." },
"Information Visibility": { "quote": "What data is revealed to players and when. Slay the Spire shows the enemy's next action, focusing decisions on response rather than prediction." },
"System Complexity": { "quote": "The depth and intricacy of game rules and their interactions. Dwarf Fortress simulates hundreds of interacting systems from geology to psychology." },
"System Accessibility": { "quote": "How easily players can understand and interact with game systems. Minecraft's crafting system uses visual recipes to communicate requirements." },
"Combat Systems": { "quote": "The rules governing conflict resolution. Doom (2016) encourages aggressive play by restoring health and ammo through glory kills." },
"Movement Systems": { "quote": "Rules governing how players navigate the game world. Titanfall 2 combines wall-running, sliding, and grappling hooks for fluid traversal." },
"Crafting Systems": { "quote": "Creation of items from component resources. No Man's Sky uses crafting chains where basic resources become components for more advanced items." },
"Character Progression": { "quote": "How player avatars develop capabilities over time. Disco Elysium ties skill points to personality traits that affect dialogue and problem-solving options." },
"Skill Trees": { "quote": "Branching advancement options representing specialized abilities. Diablo II's skill trees encourage specialized character builds through investment choices." },
"Procedural Generation": { "quote": "Algorithmically creating content rather than hand-crafting it. Spelunky generates levels with consistent rules but unpredictable configurations." },
"Damage Calculations": { "quote": "Mathematical systems for resolving combat outcomes. Monster Hunter's damage system includes weapon sharpness, hit zones, and elemental weaknesses." },
"AI Systems": { "quote": "Rules governing non-player character behavior. F.E.A.R.'s enemies use coordinated tactics like flanking and suppression fire." },
"Meta-progression": { "quote": "Advancement that persists between gameplay sessions or character deaths. Hades maintains engagement through permanent upgrades and story progression after failure." },
"Interlocking Systems": { "quote": "Multiple mechanics that create a cohesive whole. In Oxygen Not Included, temperature, gas, liquid, and resource systems create complex problem-solving scenarios." },
"Balance Patching": { "quote": "Ongoing adjustment of system values based on player behavior. League of Legends regularly adjusts character strengths to maintain competitive balance." },
"System Constraints": { "quote": "Limitations that create interesting decisions. The limited inventory in Resident Evil creates tension through forced prioritization." },
"Mathematical Modeling": { "quote": "Using formulas to determine gameplay outcomes. Final Fantasy's damage calculations incorporate character stats, equipment bonuses, and situational multipliers." },
"Systemic Narrative": { "quote": "Stories emerging from system interactions rather than scripted events. Crusader Kings generates dynastic dramas through character trait interactions and political systems." }
}
