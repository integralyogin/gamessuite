{
"Care About Your Craft": { "quote": "Why spend your life developing software unless you care about doing it well?" },
"Think About Your Work": { "quote": "Never run on auto-pilot. Constantly critique and appraise your work." },
"Provide Options, Don't Make Lame Excuses": { "quote": "Instead of excuses, provide options. Don't say it can't be done; explain what can be done." },
"Don't Live with Broken Windows": { "quote": "Fix bad designs, wrong decisions, and poor code when you see them. One broken window leads to more broken windows." },
"Be a Catalyst for Change": { "quote": "You can't force change on people. Instead, show them how the future might be and help them participate in creating it." },
"Remember the Big Picture": { "quote": "Don't get so engrossed in the details that you forget to check what's happening around you." },
"Make Quality a Requirements Issue": { "quote": "Involve your users in determining the project's real quality requirements." },
"Invest Regularly in Your Knowledge Portfolio": { "quote": "Make learning a habit. Diversify. Manage risk in your knowledge portfolio." },
"Critically Analyze What You Read and Hear": { "quote": "Don't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project." },
"It's Both What You Say and the Way You Say It": { "quote": "There's no point in having great ideas if you don't communicate them effectively." },
"DRY (Don't Repeat Yourself)": { "quote": "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system." },
"Make It Easy to Reuse": { "quote": "If it's easy to reuse, people will. Create an environment that supports reuse." },
"Eliminate Effects Between Unrelated Things": { "quote": "Design components that are self-contained, independent, and have a single, well-defined purpose." },
"There Are No Final Decisions": { "quote": "No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change." },
"Use Tracer Bullets to Find the Target": { "quote": "Tracer bullets let you home in on your target by trying things and seeing how close they land." },
"Prototype to Learn": { "quote": "Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn." },
"Program Close to the Problem Domain": { "quote": "Design and code in the language of the problem domain." },
"Estimate to Avoid Surprises": { "quote": "Estimate before you start. You'll spot potential problems up front." },
"Iterate the Schedule with the Code": { "quote": "Use experience you gain as you implement to refine the project time scales." },
"Keep Knowledge in Plain Text": { "quote": "Plain text won't become obsolete. It helps leverage your work and simplifies debugging and testing." },
"Use the Power of Command Shells": { "quote": "Use the shell when graphical user interfaces don't cut it." },
"Use a Single Editor Well": { "quote": "The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable." },
"Always Use Source Code Control": { "quote": "Source code control is a time machine for your work—you can go back." },
"Fix the Problem, Not the Blame": { "quote": "It doesn't really matter whether the bug is your fault or someone else's—it is still your problem, and it still needs to be fixed." },
"Don't Panic": { "quote": "Take a deep breath and THINK! What's the worst thing that could happen?" },
"Design with Contracts": { "quote": "Use contracts to document and verify that code does no more and no less than it claims to do." },
"Crash Early": { "quote": "A dead program normally does a lot less damage than a crippled one." },
"Use Assertions to Prevent the Impossible": { "quote": "Assertions validate your assumptions. Use them to protect your code from an uncertain world." },
"Use Exceptions for Exceptional Problems": { "quote": "Exceptions should be reserved for unexpected events. Don't use exceptions for flow control." },
"Finish What You Start": { "quote": "Where possible, the function or object that allocates a resource should be responsible for deallocating it." }
}
