{
"Basic Definition": { "quote": "LIFO (Last In First Out) data structure where elements are added and removed from the same end." },
"Stack Operations": { "quote": "push(element) adds to top, pop() removes from top, peek() views top without removal." },
"Implementation Types": { "quote": "Array-based fixed size stack vs. Dynamic linked list implementation." },
"Stack Pointer": { "quote": "top/sp tracks the index of the topmost element, -1 indicates empty stack." },
"Stack Overflow": { "quote": "Error condition when push operation exceeds stack capacity in fixed-size implementation." },
"Stack Underflow": { "quote": "Error condition when pop/peek attempted on empty stack." },
"Memory Management": { "quote": "Call stack manages function calls and local variables in program execution." },
"Stack Frame": { "quote": "Contains function parameters, return address, and local variables for each function call." },
"Recursion Stack": { "quote": "Manages recursive function calls, each call creates new stack frame." },
"Expression Evaluation": { "quote": "Evaluates postfix expressions: 2 3 + 4 * becomes ((2 + 3) * 4)." },
"Parenthesis Matching": { "quote": "Checks balanced parentheses: push for opening, pop for closing, empty stack means balanced." },
"Syntax Parsing": { "quote": "Compiler uses stack for parsing and syntax validation of programming constructs." },
"Undo Operations": { "quote": "Stack stores previous states for implementing undo functionality." },
"Browser History": { "quote": "Back/forward navigation implements stack for webpage history." },
"Stack ADT": { "quote": "Abstract Data Type defining stack behavior independent of implementation." },
"Time Complexity": { "quote": "O(1) for push, pop, peek operations in typical implementations." },
"Space Complexity": { "quote": "O(n) where n is number of elements in stack." },
"Dynamic Stack": { "quote": "Grows and shrinks automatically as elements are added/removed." },
"Stack Applications": { "quote": "Function calls, expression evaluation, backtracking, memory management." },
"Stack Properties": { "quote": "Order-preserving, self-organizing, temporary storage structure." },
"Stack Initialization": { "quote": "Creates empty stack: top = -1, allocate memory for elements." },
"Stack Traversal": { "quote": "Elements can only be accessed from top to bottom sequentially." },
"Stack Memory": { "quote": "Static memory allocation in program execution for local variables and function calls." },
"Stack Safety": { "quote": "Bound checking prevents buffer overflow in fixed-size implementations." },
"Stack Operations Pseudocode": { "quote": "if(top == size-1) stack_full; if(top == -1) stack_empty;" },
"Stack vs Queue": { "quote": "Stack is LIFO, Queue is FIFO - different access patterns for different needs." },
"Stack in System Design": { "quote": "Used in call center systems, printer spooling, recursive algorithms." },
"Stack Variations": { "quote": "Min stack, Max stack track minimum/maximum elements in O(1) time." },
"Multi-Stack": { "quote": "Multiple stacks in single array with efficient space utilization." },
"Concurrent Stack": { "quote": "Thread-safe implementation for parallel processing environments." }
}
