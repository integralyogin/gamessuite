{
"Creational Patterns": { "quote": "Patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation." },
"Singleton": { "quote": "Ensures a class has only one instance and provides a global point of access to it. Java's Runtime.getRuntime() returns the same instance each time." },
"Factory Method": { "quote": "Defines an interface for creating an object, but lets subclasses decide which class to instantiate. Calendar.getInstance() lets the system determine the appropriate calendar implementation." },
"Abstract Factory": { "quote": "Provides an interface for creating families of related or dependent objects without specifying their concrete classes. javax.xml.parsers.DocumentBuilderFactory creates parsers appropriate for different XML implementations." },
"Builder": { "quote": "Separates the construction of a complex object from its representation so that the same construction process can create different representations. StringBuilder allows construction of strings through sequential method calls." },
"Prototype": { "quote": "Creates new objects by copying an existing object, known as the prototype. JavaScript's Object.create() creates new objects using existing ones as prototypes." },
"Structural Patterns": { "quote": "Patterns that ease the design by identifying a simple way to realize relationships between entities." },
"Adapter": { "quote": "Converts the interface of a class into another interface clients expect. java.util.Arrays.asList() adapts arrays to work as Lists." },
"Bridge": { "quote": "Decouples an abstraction from its implementation so that the two can vary independently. JDBC provides a bridge between application abstraction and database driver implementation." },
"Composite": { "quote": "Composes objects into tree structures to represent part-whole hierarchies. Treat individual objects and compositions uniformly. GUI containers hold components, which can be containers themselves." },
"Decorator": { "quote": "Attaches additional responsibilities to an object dynamically. Java I/O streams use decorators extensively: new BufferedReader(new FileReader(file))." },
"Facade": { "quote": "Provides a unified interface to a set of interfaces in a subsystem. Simplifies a complex API. java.net.URL provides a facade to accessing web resources." },
"Flyweight": { "quote": "Uses sharing to support large numbers of fine-grained objects efficiently. String interning in Java means 'hello' == 'hello' for identical string literals." },
"Proxy": { "quote": "Provides a surrogate or placeholder for another object to control access to it. java.lang.reflect.Proxy creates runtime proxy objects to control access." },
"Behavioral Patterns": { "quote": "Patterns that identify common communication patterns between objects and realize these patterns." },
"Chain of Responsibility": { "quote": "Passes a request along a chain of handlers. Upon handling, each handler decides to process the request or pass it to the next handler. Exception handling in try-catch-finally blocks forms a chain." },
"Command": { "quote": "Encapsulates a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations. java.lang.Runnable encapsulates executable code as an object." },
"Interpreter": { "quote": "Defines a representation for a language's grammar along with an interpreter that uses this representation to interpret sentences in the language. java.util.Pattern interprets regular expressions." },
"Iterator": { "quote": "Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. java.util.Iterator allows iteration over collections." },
"Mediator": { "quote": "Defines an object that encapsulates how a set of objects interact, promoting loose coupling by keeping objects from referring to each other explicitly. java.util.concurrent.Executor mediates between task producers and consumers." },
"Memento": { "quote": "Captures and externalizes an object's internal state so that the object can be restored to this state later, without violating encapsulation. java.io.Serializable with ObjectOutputStream/ObjectInputStream saves and restores object state." },
"Observer": { "quote": "Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically. java.util.Observable and java.util.Observer implement this pattern." },
"State": { "quote": "Allows an object to alter its behavior when its internal state changes. The object will appear to change its class. TCP connection objects change behavior based on state (established, listening, closed)." },
"Strategy": { "quote": "Defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it. Comparable and Comparator allow different comparison strategies." },
"Template Method": { "quote": "Defines the skeleton of an algorithm in a method, deferring some steps to subclasses. java.util.AbstractList defines structure that concrete lists implement." },
"Visitor": { "quote": "Represents an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates. javax.lang.model.element.Element and ElementVisitor in the annotation processing API." },
"Concurrency Patterns": { "quote": "Patterns that address problems that arise when multiple threads or processes are used." },
"Thread Pool": { "quote": "A group of reusable threads used to perform tasks. java.util.concurrent.ExecutorService manages pools of threads for concurrent tasks." },
"Double-Checked Locking": { "quote": "Reduces the overhead of acquiring a lock by testing the locking criterion before acquiring the lock. Safely implementing singletons in multi-threaded environments." },
"Asynchronous Method Invocation": { "quote": "A pattern where the call site is not blocked while waiting for the called code to finish. Instead, the calling thread is notified when the code finishes executing. java.util.concurrent.Future represents results of asynchronous computations." },
"Active Object": { "quote": "Decouples method execution from method invocation to enhance concurrency. Each object has its own thread of control. java.util.concurrent.ExecutorService with Callable/Runnable implementations." }
}
