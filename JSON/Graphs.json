{
  "Vertices": { "quote": "Fundamental units of graph structure - nodes representing entities in a network." },
  "Edges": { "quote": "Connections between vertices, defining relationships in the graph space." },
  "Adjacency": { "quote": "Two vertices are adjacent if they share a common edge (Diestel, Graph Theory)." },
  "Cycle": { "quote": "A path where first and last vertices coincide, fundamental in network analysis." },
  "Tree": { "quote": "A connected acyclic graph - nature's favorite hierarchical structure." },
  "Connectivity": { "quote": "A graph is k-connected if it remains connected upon removing fewer than k vertices." },
  "Path": { "quote": "Sequence of edges connecting two vertices through adjacent nodes." },
  "Directed Graph": { "quote": "Edges with directionality - modeling asymmetric relationships." },
  "Undirected Graph": { "quote": "Symmetric connections where edge direction doesn't matter." },
  "Weighted Graph": { "quote": "Numerical values assigned to edges represent connection strengths." },
  "Bipartite Graph": { "quote": "Vertices divided into two disjoint sets with edges only between sets." },
  "Complete Graph": { "quote": "Every pair of distinct vertices is connected by a unique edge." },
  "Sparse vs Dense": { "quote": "|E| ≪ |V|² vs |E| ≈ |V|² - crucial for algorithm selection." },
  "Adjacency Matrix": { "quote": "Square matrix representing finite graph, with elements indicating adjacency." },
  "Adjacency List": { "quote": "Space-efficient representation using array of linked lists." },
  "Breadth-First Search": { "quote": "Layer-by-layer exploration using queue data structure." },
  "Depth-First Search": { "quote": "Backtracking algorithm using stack (either explicit or implicit)." },
  "Shortest Path": { "quote": "Dijkstra's algorithm: finds minimum-weight paths from source vertex." },
  "Minimum Spanning Tree": { "quote": "Kruskal's algorithm: 'grow' a tree by adding cheapest edges first." },
  "Topological Sort": { "quote": "Linear ordering where for every edge uv, u comes before v." },
  "Planar Graph": { "quote": "Embeddable in plane without edge crossings (Kuratowski's theorem)." },
  "Graph Coloring": { "quote": "Assignment of labels (colors) such that adjacent vertices differ." },
  "Clique": { "quote": "Complete subgraph - maximal set of mutually connected vertices." },
  "Isomorphism": { "quote": "Bijection preserving adjacency - ƒ: V(G) → V(H) with uv ∈ E(G) ⇨ ƒ(u)ƒ(v) ∈ E(H)." },
  "Eulerian Path": { "quote": "Trail visiting every edge exactly once - exists iff 0 or 2 vertices have odd degree." },
  "Hamiltonian Path": { "quote": "Path visiting every vertex exactly once - NP-complete problem." },
  "Network Flow": { "quote": "Ford-Fulkerson method: compute maximum flow through capacity-constrained network." },
  "Strong Connectivity": { "quote": "Kosaraju's algorithm: every vertex reachable from every other in directed graph." },
  "Graph Neural Networks": { "quote": "Message-passing architectures operating directly on graph structures." },
  "Random Graphs": { "quote": "Erdős–Rényi model: fundamental probabilistic approach to graph generation." }
}

