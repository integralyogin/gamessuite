{
"Event Sourcing": { "quote": "Storing the full history of domain changes as an immutable sequence of events rather than just current state." },
"Event Stream": { "quote": "An ordered sequence of events for a specific aggregate or entity identified by a unique stream ID." },
"Append-Only": { "quote": "Events are only added to the store, never modified or deleted, preserving the complete historical record." },
"Immutability": { "quote": "Once stored, events are never changed, ensuring audit capability and historical accuracy." },
"Projections": { "quote": "Derived read models created by processing events to serve specific query needs." },
"Eventual Consistency": { "quote": "System will become consistent over time as events are processed, rather than maintaining immediate consistency." },
"CQRS": { "quote": "Command Query Responsibility Segregation separates write operations (commands) from read operations (queries)." },
"Event Schema": { "quote": "The structure defining event properties, allowing correct interpretation of stored events." },
"Schema Evolution": { "quote": "Strategies for handling changes to event definitions over time while maintaining backward compatibility." },
"Event Versioning": { "quote": "Tracking schema versions to ensure events can be correctly interpreted as formats change." },
"Snapshots": { "quote": "Point-in-time captures of aggregate state to avoid replaying entire event history." },
"Catchup Subscriptions": { "quote": "Reading all events from a specific position to process historical and new events." },
"Live Subscriptions": { "quote": "Receiving notifications about new events as they are appended to streams." },
"Event Handlers": { "quote": "Components that execute business logic in response to specific events." },
"Replay Capability": { "quote": "The ability to reconstruct state at any point in time by replaying events." },
"Idempotency": { "quote": "Processing the same event multiple times produces the same result, avoiding duplicate effects." },
"Concurrency Control": { "quote": "Mechanisms like optimistic concurrency to handle simultaneous updates to the same stream." },
"Expected Version": { "quote": "Concurrency check ensuring events are only appended if the stream is at the expected version." },
"Causality": { "quote": "Tracking which events caused other events to maintain logical order in distributed systems." },
"Domain Events": { "quote": "Events representing significant changes in the business domain." },
"Integration Events": { "quote": "Events shared between bounded contexts or systems to communicate changes." },
"Event Partitioning": { "quote": "Distributing events across storage nodes for scalability and performance." },
"Event Store Clustering": { "quote": "Distributing the event store across multiple nodes for high availability and scale." },
"Global Stream": { "quote": "A special stream containing links to all individual stream events in chronological order." },
"Temporal Queries": { "quote": "The ability to query the state of the system at any point in its history." },
"Event Correlation": { "quote": "Associating related events across different streams or bounded contexts." },
"Event Upcasting": { "quote": "Transforming older event versions to newer formats during event replay." },
"Competing Consumers": { "quote": "Multiple consumers processing events from the same stream for load distribution." },
"Retroactive Events": { "quote": "Adding events that are logically positioned earlier in the timeline to correct historical records." },
"Event Sourcing Patterns": { "quote": "Architectural approaches for implementing event sourcing in different contexts and scales." }
}
