{  
  "Core Architecture": { "quote": "Entity-Component-System (ECS): Entities (IDs) + Components (data) + Systems (logic). Example: Unity GameObjects." },  
  "Rendering Pipeline": { "quote": "Forward vs. Deferred: Draw calls → Vertex Shader → Fragment Shader (OpenGL/Vulkan/Metal)." },  
  "Physics Engine": { "quote": "Havok/PhysX: Rigidbody.AddForce() + Collision detection (GJK algorithm). Gravity: F = m * a." },  
  "Audio System": { "quote": "FMOD/Wwise: 3D sound positioning (x,y,z) + Doppler effect. AudioSource.PlayOneShot()." },  
  "Scripting System": { "quote": "C# (Unity), Lua (Roblox), Blueprints (Unreal): MonoBehaviour.Update() → Game logic." },  
  "Animation System": { "quote": "State machines: Blend trees for locomotion. Skinned meshes + bone weights (FBX/glTF)." },  
  "Networking": { "quote": "UNet/Photon: RPCs (Remote Procedure Calls) + Lag compensation → SyncTransform(x,y,z)." },  
  "Memory Management": { "quote": "Pooling (reuse objects) + Garbage Collection (C#) vs. manual (C++). Smart pointers: std::shared_ptr." },  
  "UI System": { "quote": "Canvas (Unity) / Slate (Unreal): Anchors, event propagation. UI.Button.onClick → LoadScene()." },  
  "Scene Management": { "quote": "Spatial partitioning: Octree/BVH. Frustum culling: if (object.inView) → Render()." },  
  "Build Pipeline": { "quote": "Asset bundling: Textures → Atlases, Models → LODs. Platform targets: Windows, Switch, iOS." },  
  "Virtual Reality (VR)": { "quote": "OpenXR/Oculus SDK: Headset tracking → UpdateCameraPose(x, y, z, rot)." },  
  "Custom Editors": { "quote": "Unity Editor scripting: [MenuItem(\"Tools/GenerateTerrain\")] → Procedural workflows." },  
  "Performance Profiling": { "quote": "Unity Profiler/RenderDoc: Track CPU (ms) + GPU (draw calls) + Memory leaks." },  
  "Cross-Platform Input": { "quote": "Input.GetAxis(\"Horizontal\") → Map to keyboard, gamepad, or touch (Mobile)." },  
  "Cloud Integration": { "quote": "PlayFab/AWS: Leaderboards.SaveScore(playerID, 100) + Cloud saves." },  
  "Particle Systems": { "quote": "GPU particles: Emit(rate=100, velocity=Random.insideSphere). VFX Graph (Unity)." },  
  "AI Integration": { "quote": "NavMesh.CalculatePath(start, end) → Behavior Trees (Unreal AI)." },  
  "Real-Time GI": { "quote": "Light Probes + Ray Tracing: Diffuse ≈ ∫Li(p,ω) * fr(ω) dω (rendering equation)." },  
  "Plugin Ecosystem": { "quote": "Third-party SDKs: Steamworks (achievements), FMOD (audio), AR Foundation." },  
  "Legacy Support": { "quote": "Backward compatibility: Deprecated APIs → Wrapper classes (e.g., Unity’s legacy UI)." },  
  "Ethical Engine Design": { "quote": "Inclusivity: Colorblind mode (HSV shifts) + Rebindable controls for accessibility." },  
  "Future Trends": { "quote": "AI-driven engines: DLSS (super-resolution) + Neural graphics (NVIDIA Omniverse)." }  
}  
