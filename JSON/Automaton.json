{
"Finite Automaton": { "quote": "M = (Q, Σ, δ, q₀, F) defines states, alphabet, transitions, start, and accept states" },
"Deterministic Finite Automaton": { "quote": "DFA: Each state has exactly one transition for each input symbol" },
"Nondeterministic Finite Automaton": { "quote": "NFA: States can have multiple or no transitions for each input" },
"Epsilon-NFA": { "quote": "ε-NFA: Allows empty string transitions between states" },
"Pushdown Automaton": { "quote": "PDA: (Q, Σ, Γ, δ, q₀, Z₀, F) adds stack operations to finite automaton" },
"Deterministic PDA": { "quote": "DPDA: Pushdown automaton with deterministic transitions" },
"Turing Machine": { "quote": "(Q, Σ, Γ, δ, q₀, blank, F) infinite tape with read/write head" },
"Multi-tape Turing Machine": { "quote": "Multiple tapes with independent read/write heads" },
"Linear Bounded Automaton": { "quote": "Turing machine with tape length bounded by input size" },
"Cellular Automaton": { "quote": "Grid of cells evolving based on neighbor states" },
"Quantum Automaton": { "quote": "States in quantum superposition with quantum transitions" },
"Probabilistic Automaton": { "quote": "Transitions with associated probabilities" },
"Büchi Automaton": { "quote": "Infinite word acceptance with recurring final states" },
"Moore Machine": { "quote": "Output depends only on current state" },
"Mealy Machine": { "quote": "Output depends on current state and input" },
"Two-Way Automaton": { "quote": "Input head can move left and right" },
"Stack Automaton": { "quote": "Can read (not write) stack at any position" },
"Counter Automaton": { "quote": "Limited to counting operations on storage" },
"Tree Automaton": { "quote": "Processes tree structures instead of strings" },
"Regular Expressions": { "quote": "Equivalent to finite automata: (a|b)*abb" },
"State Transitions": { "quote": "δ: Q × Σ → Q maps state-input pairs to next states" },
"Language Recognition": { "quote": "L(M) = {w ∈ Σ* | M accepts w}" },
"Minimization": { "quote": "Reducing states while preserving behavior" },
"Equivalence": { "quote": "Two automata accept the same language" },
"Closure Properties": { "quote": "Union, intersection, concatenation, complement" },
"Pumping Lemma": { "quote": "For regular languages: xyz where y can be pumped" },
"State Complexity": { "quote": "Minimum states needed for language recognition" },
"Chomsky Hierarchy": { "quote": "Regular ⊂ Context-Free ⊂ Context-Sensitive ⊂ Recursively Enumerable" },
"Decidability": { "quote": "Whether automaton accepts given input is decidable" },
"Automaticity": { "quote": "Sequence generation through finite automata" }
}
