{
  "Associative Array": { "quote": "A collection of key-value pairs where each unique key maps to a value." },
  "Hash Table": { "quote": "An implementation of a dictionary using array-based buckets with hash addressing." },
  "Key-Value Pair": { "quote": "Fundamental unit of data storage: {K: V} relationships." },
  "Hashing Function": { "quote": "Deterministic function mapping keys to array indices: h(key) → index." },
  "Collision Resolution": { "quote": "Handling different keys hashing to same index: chaining vs open addressing." },
  "Open Addressing": { "quote": "Collision resolution through probing sequences (linear/quadratic/double hashing)." },
  "Separate Chaining": { "quote": "Collision resolution using linked lists at each bucket." },
  "Load Factor": { "quote": "α = n/k where n=entries, k=buckets - critical for performance tuning." },
  "Time Complexity": { "quote": "O(1) average case for inserts/lookups in hash tables." },
  "Direct-Address Table": { "quote": "Dictionary implementation using direct key-to-index mapping." },
  "Perfect Hashing": { "quote": "Hash function eliminating collisions for known key sets." },
  "Red-Black Tree": { "quote": "Balanced BST alternative for ordered dictionary implementations." },
  "Trie Structure": { "quote": "Tree-based dictionary for string keys with common prefixes." },
  "Universal Hashing": { "quote": "Randomized hash functions minimizing collision probabilities." },
  "Dynamic Resizing": { "quote": "Rehashing strategy maintaining optimal load factors." },
  "Consistent Hashing": { "quote": "Specialized hashing for distributed system dictionaries." },
  "Cuckoo Hashing": { "quote": "Alternative collision resolution using multiple hash tables." },
  "Double Hashing": { "quote": "Probing method using secondary hash function: h1(k) + i*h2(k)." },
  "Dictionary ADT": { "quote": "Abstract Data Type operations: Insert, Delete, Search." },
  "Symbol Table": { "quote": "Dictionary implementation in compilers for identifier tracking." },
  "Ordered vs Unordered": { "quote": "Key iteration order preservation tradeoff." },
  "LRU Cache": { "quote": "Dictionary extension with eviction policy (Least Recently Used)." },
  "Persistent Data Structure": { "quote": "Immutable dictionaries preserving previous versions." },
  "Concurrent Hash Map": { "quote": "Thread-safe dictionary implementation with lock striping." },
  "Bloom Filter": { "quote": "Probabilistic dictionary for set membership queries." },
  "Cryptographic Hash": { "quote": "Specialized hash functions for security-critical dictionaries." }
}

