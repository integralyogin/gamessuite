{
"Definition": { "quote": "A container providing context for identifiers, preventing name collisions across different scopes." },
"C++ Namespaces": { "quote": "namespace MyLib { class Vector {}; } // Prevents conflict with std::Vector" },
"Java Packages": { "quote": "package com.company.project; // Hierarchical namespace structure to organize classes" },
"Python Modules": { "quote": "import numpy as np # Creates a namespace 'np' containing NumPy's functions and classes" },
"XML Namespaces": { "quote": "<html xmlns=\"http://www.w3.org/1999/xhtml\"> <!-- Distinguishes between different XML vocabularies -->" },
"JavaScript Modules": { "quote": "import { Component } from 'react'; // ES6 modules provide namespace isolation" },
"Global Namespace": { "quote": "window.alert() in browsers // The default container when no explicit namespace is specified" },
"Namespace Pollution": { "quote": "Excessive global variables lead to hard-to-debug conflicts and unpredictable behavior." },
"Namespace Resolution": { "quote": ":: operator in C++ resolves which namespace a symbol belongs to: std::cout" },
"DNS Namespace": { "quote": "example.com.services.region // Hierarchical domain name system for internet addressing" },
"Unix Filesystem": { "quote": "/usr/local/bin/python // Paths are namespaces that organize system resources" },
"Database Schemas": { "quote": "SELECT * FROM schema.table // Schemas separate database objects into logical groups" },
"Docker Namespaces": { "quote": "Linux kernel feature that isolates container resources: PID, network, mount namespaces" },
"Kubernetes Namespaces": { "quote": "kubectl -n kube-system // Divides cluster resources between multiple users or projects" },
"CSS Namespaces": { "quote": ".component-name__element--modifier // BEM methodology creates CSS namespaces to avoid style conflicts" },
"Object Namespaces": { "quote": "Math.random() // Objects used as namespaces to group related functions" },
"Anonymous Namespaces": { "quote": "namespace { int helper() {} } // C++ feature for file-scope symbols" },
"Namespace Aliasing": { "quote": "namespace fs = std::filesystem; // Creates shorter names for frequently used namespaces" },
"Namespace Design": { "quote": "Good namespace design improves code organization, readability, and maintainability." },
"Nested Namespaces": { "quote": "namespace Outer::Inner { void func(); } // Hierarchical organization of related code" },
"Namespace Merging": { "quote": "TypeScript allows declaration merging: namespace App {} can be extended later" },
"Namespace Versioning": { "quote": "xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/v1.2\" handles API evolution" },
"Namespace Collisions": { "quote": "Two libraries using identical names require resolution through namespaces or renaming." },
"Namespace Best Practices": { "quote": "Keep namespaces logical, avoid deeply nested hierarchies, provide clear documentation." },
"Symbol Visibility": { "quote": "Namespaces control which identifiers are accessible from different parts of a program." },
"URI Namespaces": { "quote": "https://api.example.com/v1/ // URL paths create namespaces for web resources" },
"Programming Paradigms": { "quote": "Functional programming often uses module namespaces to organize pure functions." },
"Language Features": { "quote": "using namespace std; // Selectively imports symbols into the current scope" },
"Cross-Language Namespaces": { "quote": "Foreign Function Interfaces must manage namespaces across language boundaries" },
"Namespace Standards": { "quote": "Industry conventions like Java's reversed domain name pattern (com.company.project)" }
}
